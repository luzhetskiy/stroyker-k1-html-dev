"use strict";var breakpoints={xs:0,sm:576,md:768,lg:1024,xl:1280};function throttle(t,e,a){var o,n=a||{},i=n.noTrailing,s=void 0!==i&&i,r=n.noLeading,l=void 0!==r&&r,c=n.debounceMode,d=void 0===c?void 0:c,u=!1,m=0;function h(){o&&clearTimeout(o)}function p(){for(var a=arguments.length,n=new Array(a),i=0;i<a;i++)n[i]=arguments[i];var r=this,c=Date.now()-m;function p(){m=Date.now(),e.apply(r,n)}function v(){o=void 0}u||(l||!d||o||p(),h(),void 0===d&&c>t?l?(m=Date.now(),s||(o=setTimeout(d?v:p,t))):p():!0!==s&&(o=setTimeout(d?v:p,void 0===d?t-c:t)))}return p.cancel=function(t){var e=(t||{}).upcomingOnly,a=void 0!==e&&e;h(),u=!a},p}function debounce(t,e,a){var o=(a||{}).atBegin;return throttle(t,e,{debounceMode:!1!==(void 0!==o&&o)})}function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function sliderDebounce(t,e,a){var o=!1;return function(){var n=arguments,i=this;o&&clearTimeout(o),o=setTimeout((function(){t.apply(a||i,n)}),e)}}var SliderConstructor=function(){function t(e){_classCallCheck(this,t),this.element=e}return _createClass(t,[{key:"init",value:function(){var t=this;this.params={},this.params.autoplay=null!==this.element.getAttribute("data-autoplay-timeout"),this.params.autoplayTimeout=+this.element.getAttribute("data-autoplay-timeout")||5e3,this.params.arrows=null===this.element.getAttribute("data-no-arrows"),window.matchMedia("(min-width: 575.98px)").matches?this.params.dots=null===this.element.getAttribute("data-no-dots"):this.params.dots=!0,this.params.adaptiveHeight=null!==this.element.getAttribute("data-adaptive-height"),this.params.centerMode=null!==this.element.getAttribute("data-center"),this.params.count={},this.params.count.xs=+this.element.getAttribute("data-slides")||1,this.params.count.sm=+this.element.getAttribute("data-sm-slides")||this.params.count.xs,this.params.count.md=+this.element.getAttribute("data-md-slides")||this.params.count.sm,this.params.count.lg=+this.element.getAttribute("data-lg-slides")||this.params.count.md,this.params.count.xl=+this.element.getAttribute("data-xl-slides")||this.params.count.lg,this.params.rows={},this.params.rows.xs=+this.element.getAttribute("data-rows")||1,this.params.rows.sm=+this.element.getAttribute("data-sm-rows")||this.params.rows.xs,this.params.rows.md=+this.element.getAttribute("data-md-rows")||this.params.rows.sm,this.params.rows.lg=+this.element.getAttribute("data-lg-rows")||this.params.rows.md,this.params.rows.xl=+this.element.getAttribute("data-xl-rows")||this.params.rows.lg,this.params.state={},Object.keys(breakpoints).forEach((function(e,a){var o=0!==a?"-"+e+"-":"-",n=t.element.getAttribute("data".concat(o,"mounted"));if(null===n&&0!==a){var i=Object.keys(breakpoints)[a-1];t.params.state[e]=t.params.state[i]}else t.params.state[e]="true"===n||0===a&&"false"!==n})),this.slides=[],this.containsMobileHiddenSlides=!1,this.element.childNodes.forEach((function(e){e.tagName&&(null!==e.getAttribute("data-slide-mobile-hidden")&&(t.containsMobileHiddenSlides=!0),t.slides.push(e))})),this.createIcons(),this.checkSliderState(),this.checkSliderStateDebounced=sliderDebounce(this.checkSliderState,500,this),window.addEventListener("resize",this.checkSliderStateDebounced)}},{key:"createIcons",value:function(){var t='\n      <svg viewBox="0 0 11 19" fill="currentColor" xmlns="http://www.w3.org/2000/svg">\n        <path d="M1.4 18.1L0 16.7L7.6 9.10001L0 1.5L1.4 0L10.4 9.10001C10.4 9.10001 1.3 18.1 1.4 18.1Z"/>\n      </svg>\n    ',e='\n      <svg viewBox="0 0 11 19" fill="currentColor" xmlns="http://www.w3.org/2000/svg">\n        <path d="M9.00039 7.24792e-05L10.4004 1.40007L2.80039 9.00009L10.4004 16.6001L9.00039 18.1001L0.000391006 9.00009C0.000391006 9.00009 9.10039 7.24792e-05 9.00039 7.24792e-05Z"/>\n      </svg>\n    ',a="custom-icon-left",o="custom-icon-right";this.element.querySelectorAll(".".concat(a,", .").concat(o)).forEach((function(n){var i=n.classList.contains(a),s=n.classList.contains(o);i?(n.classList.remove(a),t=n.outerHTML):s&&(n.classList.remove(o),e=n.outerHTML),n.remove()})),this.nextArrow='<button type="button" class="button button_style-1 slick-next">'.concat(t,"</button>"),this.prevArrow='<button type="button" class="button button_style-1 slick-prev">'.concat(e,"</button>")}},{key:"checkSliderState",value:function(){if(!this.mounted||this.savedWindowWidth!==window.innerWidth){var t;for(var e in this.savedWindowWidth=window.innerWidth,this.mounted&&this.unmount(),breakpoints)window.innerWidth>=breakpoints[e]&&(t=this.params.state[e]);t?(this.element.classList.remove("visible"),this.containsMobileHiddenSlides&&this.checkSlidesVisibility(),this.mount()):this.element.classList.add("visible")}}},{key:"checkSlidesVisibility",value:function(){var t=this;this.slides.forEach((function(t){t.remove()})),this.slides.forEach((function(e){var a=null!==e.getAttribute("data-slide-mobile-hidden"),o=window.innerWidth<breakpoints.sm;a&&o||t.element.insertAdjacentElement("beforeend",e)}))}},{key:"mount",value:function(){$(this.element).slick({autoplay:this.params.autoplay,autoplaySpeed:this.params.autoplayTimeout,mobileFirst:!0,slidesToShow:this.params.count.xs,slidesToScroll:this.params.count.xs,rows:this.params.rows.xs,prevArrow:this.prevArrow,nextArrow:this.nextArrow,arrows:this.params.arrows,adaptiveHeight:this.params.adaptiveHeight,dots:this.params.dots,centerMode:this.params.centerMode,accessibility:!1,responsive:[{breakpoint:breakpoints.sm-1,settings:{slidesToShow:this.params.count.sm,slidesToScroll:this.params.count.sm,rows:this.params.rows.sm}},{breakpoint:breakpoints.md-1,settings:{slidesToShow:this.params.count.md,slidesToScroll:this.params.count.md,rows:this.params.rows.md}},{breakpoint:breakpoints.lg-1,settings:{slidesToShow:this.params.count.lg,slidesToScroll:this.params.count.lg,rows:this.params.rows.lg}},{breakpoint:breakpoints.xl-1,settings:{slidesToShow:this.params.count.xl,slidesToScroll:this.params.count.xl,rows:this.params.rows.xl}}]}),this.mounted=!0}},{key:"unmount",value:function(){$(this.element).slick("unslick"),this.mounted=!1}}]),t}();$(document).ready((function(){$(".catalog-filter-accordion a.opener").click((function(){return $(this).parent().find("ul:first").slideToggle(),$(this).parent().toggleClass("active"),!1})),$("[data-expand]").on("click",(function(t){var e=$(t.currentTarget),a=e.parent();a.find("[data-collapse-content]").removeClass("d-none"),a.find("[data-collapse]").removeClass("d-none"),e.addClass("d-none")})),$("[data-collapse]").on("click",(function(t){var e=$(t.currentTarget),a=e.parent();a.find("[data-collapse-content]").addClass("d-none"),a.find("[data-expand]").removeClass("d-none"),e.addClass("d-none")})),$("[data-expand-menu]").on("click",(function(){$(".mobile-side-menu__background").addClass("d-block"),$(".mobile-side-menu-content").addClass("mobile-side-menu-content_active")})),$("[data-collapse-menu]").on("click",(function(){$(".mobile-side-menu__background").removeClass("d-block"),$(".mobile-side-menu-content").removeClass("mobile-side-menu-content_active"),$("[data-menu-page]:not(:first-child)").removeClass("mobile-side-menu-content__page_active")})),$("[data-menu-page-expand]").on("click",(function(t){var e=$(t.currentTarget).attr("data-menu-page-expand");$('[data-menu-page="'.concat(e,'"]')).addClass("mobile-side-menu-content__page_active")})),$("[data-menu-page-collapse]").on("click",(function(t){var e=$(t.currentTarget).attr("data-menu-page-collapse");$('[data-menu-page="'.concat(e,'"]')).removeClass("mobile-side-menu-content__page_active")})),$("[data-open-bottom-dropdown]").on("click",(function(t){$(".bottom-mobile-menu-list").toggleClass("bottom-mobile-menu-list_active"),$(t.currentTarget).toggleClass("bottom-mobile-menu-button_active")})),$("[data-close-search-modal]").on("click",(function(){$(".search-modal-window").removeClass("d-block")})),$("[data-open-search-modal]").on("click",(function(){$(".search-modal-window").addClass("d-block")})),$(".product-card-slideshow__sector").on("mousemove",(function(t){var e=$(t.currentTarget),a=e.attr("data-sector"),o=e.parent().parent();o.find(".product-card-slideshow__image_active").removeClass("product-card-slideshow__image_active"),o.find(".product-card-slideshow__dot_active").removeClass("product-card-slideshow__dot_active"),o.find('[data-sector-image="'.concat(a,'"]')).addClass("product-card-slideshow__image_active"),o.find('[data-sector-dot="'.concat(a,'"]')).addClass("product-card-slideshow__dot_active")}));var t=0,e=0;$(".product-card-slideshow__sectors").on("touchstart",(function(e){t=e.changedTouches[0].screenX})),$(".product-card-slideshow__sectors").on("touchend",(function(a){e=a.changedTouches[0].screenX;var o=$(a.currentTarget).parent(),n=o.find(".product-card-slideshow__image_active"),i=Number(n.attr("data-sector-image")),s=o.find(".product-card-slideshow__image").length;if(e<t){if(o.find(".product-card-slideshow__image_active").removeClass("product-card-slideshow__image_active"),o.find(".product-card-slideshow__dot_active").removeClass("product-card-slideshow__dot_active"),i>=s)return o.find('[data-sector-image="'.concat(1,'"]')).addClass("product-card-slideshow__image_active"),void o.find('[data-sector-dot="'.concat(1,'"]')).addClass("product-card-slideshow__dot_active");o.find('[data-sector-image="'.concat(i+1,'"]')).addClass("product-card-slideshow__image_active"),o.find('[data-sector-dot="'.concat(i+1,'"]')).addClass("product-card-slideshow__dot_active")}if(e>t){if(o.find(".product-card-slideshow__image_active").removeClass("product-card-slideshow__image_active"),o.find(".product-card-slideshow__dot_active").removeClass("product-card-slideshow__dot_active"),i<=1)return o.find('[data-sector-image="'.concat(s,'"]')).addClass("product-card-slideshow__image_active"),void o.find('[data-sector-dot="'.concat(s,'"]')).addClass("product-card-slideshow__dot_active");o.find('[data-sector-image="'.concat(i-1,'"]')).addClass("product-card-slideshow__image_active"),o.find('[data-sector-dot="'.concat(i-1,'"]')).addClass("product-card-slideshow__dot_active")}})),$(".like-btn").on("click",(function(t){t.preventDefault(),$(this).toggleClass("active")})),$(".city-selection__link").click((function(){$(".city-selection__list").toggle(0)})),$(window).click((function(t){t.target.classList.contains("city-selection__link")||$(".city-selection__list").toggle(!1)})),$(".burger-menu").click((function(){$(".mobile-menu").toggle(0)})),$(".catalog-inner-btn").click((function(t){t.preventDefault(),$(this).toggleClass("open"),$(".catalog-header-content").toggle(0)})),$(".catalog-inner-btn,.catalog-menu__head a").click((function(t){t.preventDefault(),$(".catalog-menu").toggle(0)})),$(".burger-catalog").click((function(t){t.preventDefault(),$(this).toggleClass("open")})),$(".share-btn").click((function(){$(".share-block__show").toggle(0)})),$(".close-panel").click((function(){$(".bottom-panel").toggle(0)})),$(".filter-btn, .close-btn-2").click((function(){$(".catalog-filter").toggle(0)})),$(".catalog-side__title").click((function(){$(".catalog-side__content").toggle(0),$(".catalog-side__content-accordeon").toggle(0)})),$(".catalog-opened").click((function(){$(".catalog-opened .submenu").toggle(0)})),$(".burger-menu").click((function(){$(this).toggleClass("menu-on")})),$(".catalog-inner").click((function(){$(this).toggleClass("open"),$(".catalog-inner-content").toggle(0)}))})),$((function(){$(".smoothScroll").click((function(){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var t=$(this.hash);if((t=t.length?t:$("[name="+this.hash.slice(1)+"]")).length)return $("html,body").animate({scrollTop:t.offset().top},1e3),!1}}))}));var bigSlides=$(".main-slider .owl-carousel"),autoPlayTimeoutSec=parseInt(bigSlides.data("autoplay-timeout"));bigSlides.owlCarousel({loop:!0,margin:5,nav:!0,dots:!0,items:1,autoplay:!0,autoplayTimeout:1e3*autoPlayTimeoutSec,navText:['<svg class="icon" viewBox="0 0 10.5 18.1"><path stroke="none" d="M9,0l1.4,1.4L2.8,9l7.6,7.6L9,18.1L0,9C0,9,9.1,0,9,0z"></path></svg>','<svg class="icon" viewBox="0 0 10.5 18.1"><path stroke="none" d="M1.4,18.1L0,16.7l7.6-7.6L0,1.5L1.4,0l9,9.1C10.4,9.1,1.3,18.1,1.4,18.1z"></path></svg>']});var radioButtons=document.querySelectorAll('.delivery-selection input[type="radio"]'),choices=document.querySelectorAll(".delivery-choice");radioButtons.forEach((function(t){t.addEventListener("change",(function(){var t=this;choices.forEach((function(e){e.classList.contains(t.id)||e.classList.contains("delivery-type-"+t.value)?e.style.display="block":e.style.display="none"}))}))})),$(".shopping-cart-item__delete").click((function(){$(this).parent(".shopping-cart-item").remove()})),$(".slider .owl-carousel").owlCarousel({loop:!0,margin:0,items:1,nav:!0}),$(".news-slider .owl-carousel").owlCarousel({loop:!0,margin:0,items:4,responsive:{0:{nav:!1,dots:!0,items:1},479:{nav:!1,dots:!0,items:2},768:{nav:!0,dots:!1,items:3},992:{items:4}}}),$(".action-slider .owl-carousel").owlCarousel({loop:!0,margin:20,nav:!0,dots:!1,items:3,responsive:{0:{nav:!1,dots:!0,items:1},479:{nav:!1,dots:!0,items:2},768:{nav:!0,dots:!1,items:3}}}),$(".partners-slider .owl-carousel").owlCarousel({loop:!0,margin:0,nav:!0,dots:!1,items:5,responsive:{0:{dots:!0,nav:!1,items:1},566:{nav:!1,dots:!0,items:2},768:{nav:!1,dots:!0,items:3},900:{nav:!1,dots:!0,items:4},950:{dots:!1}}}),function(t){t("select.custom-select").each((function(){var e=t(this),a=e.attr("id"),o=e.children("optgroup"),n="",i="";o.length?(o.each((function(){var e=t(this),a=e.attr("label");n+='<li class="optgroup">'+a+"</li>",e.children("option").each((function(){var e=t(this),a=e.attr("value"),o=e.html();"selected"===e.attr("selected")?(i=o,n+='<li class="selected" data-value="'+a+'">'+o+"</li>"):n+='<li data-value="'+a+'">'+o+"</li>"}))})),e.children("option").each((function(){var e=t(this),a=e.attr("value"),o=e.html();"selected"===e.attr("selected")?(i=o,n='<li class="selected" data-value="'+a+'">'+o+"</li>"+n):n='<li data-value="'+a+'">'+o+"</li>"+n}))):e.children("option").each((function(){var e=t(this),a=e.attr("value"),o=e.html();"selected"===e.attr("selected")?(i=o,n+='<li class="selected" data-value="'+a+'">'+o+"</li>"):n+='<li data-value="'+a+'">'+o+"</li>"})),t('<div class="dropdown-container"><div class="dropdown-select entypo-down-open-big"><svg class="icon"><use xlink:href="#tab-arrow"></use></svg><span>'+i+'</span></div><ul class="dropdown-select-ul" data-role="'+a+'">'+n+"</ul></div> \x3c!-- .custom-select-wrapper --\x3e").insertAfter(e)}));var e=t(".dropdown-select"),a=t(".dropdown-select-ul"),o=t(".dropdown-select-ul li");e.on("click",(function(){t(this).parent(".dropdown-container").toggleClass("active")})),a.on("mouseleave",(function(){t(this).parent(".dropdown-container").removeClass("active")})),o.on("click",(function(){var e=t(this);if(!e.hasClass("optgroup")){var a=e.parent("ul"),o=a.siblings(".dropdown-select"),n=e.html(),i=e.attr("data-value"),s="#"+a.attr("data-role");a.parent(".dropdown-container").toggleClass("active"),e.siblings("li").removeClass("selected"),e.addClass("selected"),t(s).val(i),o.children("span").html(n)}}))}(jQuery),$(".tab-content").hide(),$(".tab-content:first").show(),$("ul.tabs li,.product-card__review-link a,.schedule-btn a").click((function(){$(".tab-content").hide();var t=$(this).attr("rel");$("#"+t).fadeIn(),$("ul.tabs li").removeClass("active"),$(this).addClass("active"),$(".tab_drawer_heading").removeClass("d_active"),$(".tab_drawer_heading[rel^='"+t+"']").addClass("d_active")})),$(".tab_drawer_heading").click((function(){var t=$(this).attr("rel"),e=$("#"+t+":hidden"),a=$(this).not(".d_active");$(".tab-content").hide(),e.fadeIn(),$(".tab_drawer_heading").removeClass("d_active"),a.addClass("d_active"),$("ul.tabs li").removeClass("active"),$("ul.tabs li[rel^='"+t+"']").addClass("active")})),$("ul.tabs li").last().addClass("tab_last"),jQuery(document).ready((function(){jQuery(".schedule-btn a").click((function(){jQuery(".schedule-link").toggleClass("active")}))})),jQuery(document).ready((function(){jQuery(".product-card__review-link a").click((function(){jQuery(".review-tab-link").toggleClass("active")}))})),$(document).ready((function(){var t=$("#sync1"),e=$("#sync2");t.owlCarousel({items:1,slideSpeed:2e3,nav:!0,autoplay:!1,dots:!0,loop:!0,responsiveRefreshRate:200,margin:10}).on("changed.owl.carousel",(function(t){var a=t.item.count-1,o=Math.round(t.item.index-t.item.count/2-.5);o<0&&(o=a);o>a&&(o=0);e.find(".owl-item").removeClass("current").eq(o).addClass("current");var n=e.find(".owl-item.active").length-1,i=e.find(".owl-item.active").first().index(),s=e.find(".owl-item.active").last().index();o>s&&e.data("owl.carousel").to(o,100,!0);o<i&&e.data("owl.carousel").to(o-n,100,!0)})),e.on("initialized.owl.carousel",(function(){e.find(".owl-item").eq(0).addClass("current")})).owlCarousel({items:3,dots:!0,nav:!0,margin:10,smartSpeed:200,slideSpeed:500,slideBy:3,responsiveRefreshRate:100}).on("changed.owl.carousel",(function(e){var a=e.item.index;t.data("owl.carousel").to(a,100,!0)})),e.on("click",".owl-item",(function(e){e.preventDefault();var a=$(this).index();t.data("owl.carousel").to(a,300,!0)}))})),function(){var t=$(".button1"),e=$(".button2"),a=$(".button3"),o=$(".product-item");e.click((function(e){t.removeClass("current"),a.removeClass("current"),$(e.currentTarget).addClass("current"),localStorage.setItem("catalogGrid","wide"),o.removeClass("product-item--line"),o.addClass("product-item--wide")})),a.click((function(a){e.removeClass("current"),t.removeClass("current"),$(a.currentTarget).addClass("current"),localStorage.setItem("catalogGrid","wide"),o.removeClass("product-item--wide"),o.addClass("product-item--line")})),t.click((function(t){e.removeClass("current"),a.removeClass("current"),$(t.currentTarget).addClass("current"),localStorage.setItem("catalogGrid","default"),o.removeClass("product-item--wide"),o.removeClass("product-item--line")}))}();var keypressSliders=$(".range-slider");function gallery(){$.fancybox&&$(".owl-item [data-fancybox]").on("click",(function(){var t=$(this).parents(".owl-carousel").find(".owl-item:not(.cloned) [data-fancybox]");return $.fancybox.open(t,{selector:t,backFocus:!1},t.index(this)),!1}))}function header(){var t,e,a=$("header"),o=!1;function n(){a.hasClass("header_landing")||(e=$(window).scrollTop(),t=a.height(),e>t?a.addClass("fixed"):a.removeClass("fixed"))}n(),$(window).scroll((function(){o||(o=!0,setTimeout((function(){n(),o=!1}),100))}))}function homeBanner(){var t=$(".home-banner .owl-carousel");t.length&&t.owlCarousel({loop:!0,nav:!0,smartSpeed:500,dots:!0,items:1,lazyLoad:!0,autoplay:!0,autoplayTimeout:1e3*(+t.data("autoplay-timeout")||5),navText:['<svg class="icon" viewBox="0 0 10.5 18.1"><path stroke="none" d="M9,0l1.4,1.4L2.8,9l7.6,7.6L9,18.1L0,9C0,9,9.1,0,9,0z"></path></svg>','<svg class="icon" viewBox="0 0 10.5 18.1"><path stroke="none" d="M1.4,18.1L0,16.7l7.6-7.6L0,1.5L1.4,0l9,9.1C10.4,9.1,1.3,18.1,1.4,18.1z"></path></svg>']})}function _defineProperties(t,e){for(var a=0;a<e.length;a++){var o=e[a];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _createClass(t,e,a){return e&&_defineProperties(t.prototype,e),a&&_defineProperties(t,a),t}function _createForOfIteratorHelper(t,e){var a;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(a=_unsupportedIterableToArray(t))||e&&t&&"number"==typeof t.length){a&&(t=a);var o=0,n=function(){};return{s:n,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,r=!1;return{s:function(){a=t[Symbol.iterator]()},n:function(){var t=a.next();return s=t.done,t},e:function(t){r=!0,i=t},f:function(){try{s||null==a.return||a.return()}finally{if(r)throw i}}}}function _unsupportedIterableToArray(t,e){if(t){if("string"==typeof t)return _arrayLikeToArray(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);return"Object"===a&&t.constructor&&(a=t.constructor.name),"Map"===a||"Set"===a?Array.from(t):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?_arrayLikeToArray(t,e):void 0}}function _arrayLikeToArray(t,e){(null==e||e>t.length)&&(e=t.length);for(var a=0,o=new Array(e);a<e;a++)o[a]=t[a];return o}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function landing_sliders(){var t=$(".landing-slider .owl-carousel");t.length&&t.each((function(){var t,e,a,o,n=$(this);n.is(".landing-slider_1 .owl-carousel")?(t=2,e=2,a=3,o=4):n.is(".landing-slider_2 .owl-carousel")&&(t=1,e=2,a=3,o=4),n.owlCarousel({loop:!0,margin:20,responsive:{0:{items:t,margin:16},576:{items:e},768:{items:a},992:{items:o}}})}))}function toggle(){var t=$(".toggle-section");t.each((function(){var t,e,a=$(this),o=a.children(".toggle-section__trigger"),n=a.children(".toggle-section__content"),i=n.find(".toggle-section__close"),s=!!a.hasClass("active");(o.on("click",(function(){s=!s,r()})),i.on("click",(function(){s=!1,r()})),a.is("[data-hover]"))&&(o.add(n).on("mouseenter",(function(t){isTouch||(e&&clearTimeout(e),s=!0,r())})),o.add(n).on("mouseleave",(function(t){var a;isTouch||(a=$(this).is(o)?500:100,e=setTimeout((function(){s=!1,r()}),a))})));function r(){s?(a.add(n).add(o).addClass("active"),a.is("[data-slide]")&&n.slideDown(250)):(a.add(o).add(n).removeClass("active"),a.is("[data-slide]")&&(t?n.stop().slideUp(250):n.hide(0)))}(a.is("[data-out-hide]")||a.is("[data-hover]"))&&$(document).on("click touchstart",(function(t){var e=$(t.target);e.closest(n).length||e.closest(o).length||!s||(s=!1,r())})),r(),t=!0}))}function up(){var t=$(".js-up");function e(){$(window).scrollTop()>50?t.addClass("visible"):t.removeClass("visible")}var a=!1;$(window).on("scroll",(function(){a||(a=!0,setTimeout((function(){e(),a=!1}),100))})),e(),t.on("click",(function(t){t.preventDefault(),$("html, body").animate({scrollTop:0},500)}))}function chatBlock(){var t=$(".chat-block"),e=$("[data-chat-open]"),a=$("[data-chat-close]");e.on("click",(function(){t.addClass("active")})),a.on("click",(function(){t.removeClass("active")}))}$(keypressSliders).each((function(t,e){var a=$(e).data("name"),o=document.getElementById("id_"+a+"_0"),n=document.getElementById("id_"+a+"_1"),i=[o,n];if(o&&n)var s=parseInt(o.dataset.currentValue),r=parseInt(n.dataset.currentValue),l=parseInt(o.dataset.minValue),c=parseInt(n.dataset.maxValue);var d="";function u(t,a){var o=[null,null];o[t]=a,e.noUiSlider.set(o)}"price_range"==a&&(d=" ₽"),"undefined"!=typeof noUiSlider&&noUiSlider.create(e,{start:[s,r],connect:!0,range:{min:l,max:c},format:wNumb({decimals:0,thousand:" ",postfix:d}),step:1}),null!==e&&e.noUiSlider&&e.noUiSlider.on("update",(function(t,e){i[e].value=t[e]})),i.forEach((function(t,a){null!==t&&(t.addEventListener("change",(function(){u(a,this.value)})),t.addEventListener("keydown",(function(t){var o,n=e.noUiSlider.get(),i=Number(n[a]),s=e.noUiSlider.steps()[a];switch(t.which){case 13:u(a,this.value);break;case 38:!1===(o=s[1])&&(o=1),null!==o&&u(a,i+o);break;case 40:!1===(o=s[0])&&(o=1),null!==o&&u(a,i-o)}})))}))})),function(t){var e="cscrlb";function a(a,o){var n,i,s,r,l,c=a,d=t(a),u=d.find(".cscrlb-content"),m=7/8,h="vert",p="scrollTop",v="height",f="top";function g(e){e.preventDefault();var a=e.pageY;"horiz"===h&&(a=e.pageX),r=a-s.offset()[f],t(document).on("mousemove",w),t(document).on("mouseup",b)}function w(t){t.preventDefault();var e=t.pageY;"horiz"===h&&(e=t.pageX);var a=(e-i.offset()[f]-r)/i[v]()*u[v]();n[p](a)}function b(){t(document).off("mousemove",w),t(document).off("mouseup",b)}function _(t){if(t.target!==s[0]){var e=m*n[v](),a=("vert"===h?t.originalEvent.layerY:t.originalEvent.layerX)<s.position()[f]?n[p]()-e:n[p]()+e;n[p](a)}}function y(t){C()}function $(){var t=u[v](),e=n[p](),a=i[v](),o=a/t,r=Math.round(o*e),l=Math.floor(o*(a+2));a<t?("vert"===h?s.css({top:r,height:l}):s.css({left:r,width:l}),i.show()):i.hide()}function C(){$(),k()}function k(){s.addClass("visible"),o.autoHide&&("number"==typeof l&&window.clearTimeout(l),l=window.setTimeout((function(){s.removeClass("visible"),"number"==typeof l&&window.clearTimeout(l)}),1e3))}function x(){"vert"===h?(n.width(d.width()+S()),n.height(d.height())):(n.width(d.width()),n.height(d.height()+S()),u.height(d.height()))}function S(){var e=t('<div class="scrollbar-width-tester" style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;"></div>');t("body").append(e);var a=t(e).innerWidth(),o=t("div",e).innerWidth();return e.remove(),a===o&&navigator.userAgent.toLowerCase().indexOf("firefox")>-1?17:a-o}function T(){x(),$()}return o=t.extend({},t.fn[e].defaults,o),window.onload=function(){u.focus()},d.hasClass("horizontal")&&(h="horiz",p="scrollLeft",v="width",f="left"),d.prepend('<div class="cscrlb-scrollbar"><div class="drag-handle"></div></div>'),i=d.find(".cscrlb-scrollbar"),s=d.find(".drag-handle"),o.wrapContent&&u.wrap('<div class="cscrlb-scroll-content" />'),n=d.find(".cscrlb-scroll-content"),x(),o.autoHide&&d.on("mouseenter",C),s.on("mousedown",g),i.on("mousedown",_),n.on("scroll",y),$(),t(window).on("resize",(function(){T()})),o.autoHide||k(),{option:function(t,e){if(!e)return o[t];o[t]=e},destroy:function(){var t;u.insertBefore(i),i.remove(),n.remove(),u.css({height:d.height()+"px","overflow-y":"scroll"}),void 0!==o[t="onDestroy"]&&o[t].call(c),d.removeData("plugin_"+e)},recalculate:T}}t.fn[e]=function(o){if("string"==typeof arguments[0]){var n,i=arguments[0],s=Array.prototype.slice.call(arguments,1);return this.each((function(){if(!t.data(this,"plugin_"+e)||"function"!=typeof t.data(this,"plugin_"+e)[i])throw new Error(" "+i+" "+e);n=t.data(this,"plugin_"+e)[i].apply(this,s)})),void 0!==n?n:this}if("object"===_typeof(o)||!o)return this.each((function(){t.data(this,"plugin_"+e)||t.data(this,"plugin_"+e,new a(this,o))}))},t.fn[e].defaults={onInit:function(){},onDestroy:function(){},wrapContent:!0,autoHide:!1}}(jQuery),$((function(){$(".cscrlb-scrollable").cscrlb()})),$(document).ready((function(){homeBanner(),header(),gallery(),landing_sliders(),up(),chatBlock(),toggle(),new СustomInteraction({targets:"a, button, [data-custom-interaction], .image-zoom"}),document.querySelectorAll(".slider-constructor").forEach((function(t){new SliderConstructor(t).init()}))}));var СustomInteraction=function t(){var e=this,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,t),this.targets=a.targets,this.touchendDelay=a.touchendDelay||100;var o=function(t){var a=[];a[0]=t.target!==document?t.target.closest(e.targets):null;for(var o=a[0],n=0;a[0]&&(o=o.parentNode)!==document;)o.matches(a.value)&&(n++,a[n]=o);if("touchstart"==t.type){if(e.touched=!0,e.timeout&&clearTimeout(e.timeout),a[0]){var i,s=_createForOfIteratorHelper(a);try{for(s.s();!(i=s.n()).done;){i.value.setAttribute("data-touch","")}}catch(t){s.e(t)}finally{s.f()}}}else("touchend"==t.type||"contextmenu"==t.type&&e.touched)&&(e.timeout=setTimeout((function(){e.touched=!1}),e.touchendDelay),a[0]&&setTimeout((function(){var t,e=_createForOfIteratorHelper(a);try{for(e.s();!(t=e.n()).done;){t.value.removeAttribute("data-touch")}}catch(t){e.e(t)}finally{e.f()}}),e.touchendDelay));"mouseenter"==t.type&&!e.touched&&a[0]&&a[0]==t.target?a[0].setAttribute("data-hover",""):"mouseleave"==t.type&&!e.touched&&a[0]&&a[0]==t.target&&(a[0].removeAttribute("data-click"),a[0].removeAttribute("data-hover")),"mousedown"==t.type&&!e.touched&&a[0]?a[0].setAttribute("data-click",""):"mouseup"==t.type&&!e.touched&&a[0]&&a[0].removeAttribute("data-click")};document.addEventListener("touchstart",o),document.addEventListener("touchend",o),document.addEventListener("mouseenter",o,!0),document.addEventListener("mouseleave",o,!0),document.addEventListener("mousedown",o),document.addEventListener("mouseup",o),document.addEventListener("contextmenu",o)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiLCJzaGFyZWQvY29uc3RhbnRzL2JyZWFrUG9pbnRzLmpzIiwic2hhcmVkL2xpYi9kZWJvdW5jZS10aHJvdHRsZS5qcyIsImZlYXR1cmVzL3NsaWRlckNvbnN0cnVjdG9yLmpzIiwiZmVhdHVyZXMvY2xpY2tFdmVudHMuanMiLCJmZWF0dXJlcy9zbW9vdGhTY3JvbGwuanMiLCJmZWF0dXJlcy9jdXN0b21TZWxlY3QuanMiLCJmZWF0dXJlcy90YWJzLmpzIiwiZmVhdHVyZXMvc3luY1NsaWRlcnMuanMiLCJmZWF0dXJlcy9iaWdTbGlkZXMuanMiXSwibmFtZXMiOlsiYnJlYWtwb2ludHMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwidGhyb3R0bGUiLCJkZWxheSIsImNhbGxiYWNrIiwib3B0aW9ucyIsInRpbWVvdXRJRCIsIl9yZWYiLCJfcmVmJG5vVHJhaWxpbmciLCJub1RyYWlsaW5nIiwiX3JlZiRub0xlYWRpbmciLCJub0xlYWRpbmciLCJfcmVmJGRlYm91bmNlTW9kZSIsImRlYm91bmNlTW9kZSIsInVuZGVmaW5lZCIsImNhbmNlbGxlZCIsImxhc3RFeGVjIiwiY2xlYXJFeGlzdGluZ1RpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ3cmFwcGVyIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3VtZW50c18iLCJBcnJheSIsIl9rZXkiLCJzZWxmIiwidGhpcyIsImVsYXBzZWQiLCJEYXRlIiwibm93IiwiZXhlYyIsImFwcGx5IiwiY2xlYXIiLCJzZXRUaW1lb3V0IiwiY2FuY2VsIiwiX3JlZjIkdXBjb21pbmdPbmx5IiwidXBjb21pbmdPbmx5IiwiZGVib3VuY2UiLCJfcmVmJGF0QmVnaW4iLCJhdEJlZ2luIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJzbGlkZXJEZWJvdW5jZSIsImZ1bmMiLCJpbnRlcnZhbCIsImNvbnRleHQiLCJ0aW1lb3V0IiwiX2FyZ3VtZW50cyIsIl90aGlzIiwiU2xpZGVyQ29uc3RydWN0b3IiLCJlbGVtZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJfdGhpczMiLCJwYXJhbXMiLCJhdXRvcGxheSIsImdldEF0dHJpYnV0ZSIsImF1dG9wbGF5VGltZW91dCIsImFycm93cyIsIndpbmRvdyIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiZG90cyIsImFkYXB0aXZlSGVpZ2h0IiwiY2VudGVyTW9kZSIsImNvdW50Iiwicm93cyIsInN0YXRlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJpbmRleCIsImJyZWFrcG9pbnQiLCJhdHRyIiwiY29uY2F0IiwicHJldktleSIsInNsaWRlcyIsImNvbnRhaW5zTW9iaWxlSGlkZGVuU2xpZGVzIiwiY2hpbGROb2RlcyIsInNsaWRlIiwidGFnTmFtZSIsInB1c2giLCJjcmVhdGVJY29ucyIsImNoZWNrU2xpZGVyU3RhdGUiLCJjaGVja1NsaWRlclN0YXRlRGVib3VuY2VkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxlZnRJY29uIiwicmlnaHRJY29uIiwibGVmdEljb25DbGFzcyIsInJpZ2h0SWNvbkNsYXNzIiwicXVlcnlTZWxlY3RvckFsbCIsImljb24iLCJpc0xlZnRJY29uIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJpc1JpZ2h0SWNvbiIsInJlbW92ZSIsIm91dGVySFRNTCIsIm5leHRBcnJvdyIsInByZXZBcnJvdyIsIm1vdW50ZWQiLCJzYXZlZFdpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsInVubW91bnQiLCJjaGVja1NsaWRlc1Zpc2liaWxpdHkiLCJtb3VudCIsImFkZCIsIl90aGlzNCIsInNob3VsZEJlSGlkZGVuIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiJCIsInNsaWNrIiwiYXV0b3BsYXlTcGVlZCIsIm1vYmlsZUZpcnN0Iiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJhY2Nlc3NpYmlsaXR5IiwicmVzcG9uc2l2ZSIsInNldHRpbmdzIiwiZG9jdW1lbnQiLCJyZWFkeSIsImNsaWNrIiwicGFyZW50IiwiZmluZCIsInNsaWRlVG9nZ2xlIiwidG9nZ2xlQ2xhc3MiLCJvbiIsImV2ZW50IiwidGFyZ2V0IiwiY3VycmVudFRhcmdldCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJpZCIsInRvdWNoc3RhcnRYIiwidG91Y2hlbmRYIiwiY2hhbmdlZFRvdWNoZXMiLCJzY3JlZW5YIiwiaW1nIiwiTnVtYmVyIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGUiLCJlIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInJlcGxhY2UiLCJob3N0bmFtZSIsImhhc2giLCJzbGljZSIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCJiaWdTbGlkZXMiLCJhdXRvUGxheVRpbWVvdXRTZWMiLCJwYXJzZUludCIsImRhdGEiLCJvd2xDYXJvdXNlbCIsImxvb3AiLCJtYXJnaW4iLCJuYXYiLCJpdGVtcyIsIm5hdlRleHQiLCJyYWRpb0J1dHRvbnMiLCJjaG9pY2VzIiwiYnRuIiwiY2xpY2tlZCIsImNob2ljZSIsInN0eWxlIiwiZGlzcGxheSIsImVhY2giLCJ0aGF0IiwibGlzdElEIiwiZ3JvdXBzIiwiY2hpbGRyZW4iLCJ0aGVPcHRpb25zIiwic3RhcnRpbmdPcHRpb24iLCJjdXJHcm91cCIsImN1ck5hbWUiLCJjdXJPcHQiLCJjdXJWYWwiLCJjdXJIdG1sIiwiaHRtbCIsImluc2VydEFmdGVyIiwic2VsZWN0ZGQiLCJzZWxlY3R1bCIsInNlbGVjdGxpIiwiaGFzQ2xhc3MiLCJwYXJlbnRVbCIsInRoaXNkZCIsInNpYmxpbmdzIiwibGlodG1sIiwibGl2YWx1ZSIsIm9yaWdpbmFsU2VsZWN0IiwidmFsIiwialF1ZXJ5IiwiaGlkZSIsInNob3ciLCJhY3RpdmVUYWIiLCJmYWRlSW4iLCJkX2FjdGl2ZVRhYiIsImFjdGl2ZVRhYkJsb2NrIiwiJHRoaXNBY3RpdmUiLCJub3QiLCJsYXN0Iiwic3luYzEiLCJzeW5jMiIsInNsaWRlU3BlZWQiLCJyZXNwb25zaXZlUmVmcmVzaFJhdGUiLCJlbCIsIml0ZW0iLCJjdXJyZW50IiwiTWF0aCIsInJvdW5kIiwiZXEiLCJvbnNjcmVlbiIsInN0YXJ0IiwiZmlyc3QiLCJlbmQiLCJ0byIsInNtYXJ0U3BlZWQiLCJzbGlkZUJ5IiwibnVtYmVyIiwiYnV0dG9uRGVmYXVsdFZpZXciLCJidXR0b25XaWRlVmlldyIsImJ1dHRvbkxpbmVWaWV3IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImtleXByZXNzU2xpZGVycyIsImdhbGxlcnkiLCJmYW5jeWJveCIsIiRzZWxlY3RvciIsInBhcmVudHMiLCJvcGVuIiwic2VsZWN0b3IiLCJiYWNrRm9jdXMiLCJoZWFkZXIiLCJoZWlnaHQiLCJzY3JvbGwiLCIkaGVhZGVyIiwiaXNUaHJvdHRsZWQiLCJjaGVjayIsImhvbWVCYW5uZXIiLCIkc2xpZGVyIiwibGF6eUxvYWQiLCJfZGVmaW5lUHJvcGVydGllcyIsInByb3BzIiwiaSIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJvIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsImlzQXJyYXkiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJGIiwicyIsIm4iLCJkb25lIiwiX2UiLCJmIiwiVHlwZUVycm9yIiwiZXJyIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsInN0ZXAiLCJuZXh0IiwiX2UyIiwicmV0dXJuIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsImNhbGwiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiaW5zdGFuY2UiLCJsYW5kaW5nX3NsaWRlcnMiLCIkc2xpZGVycyIsImNvdW50MSIsImNvdW50MiIsImNvdW50MyIsImNvdW50NCIsIiR0aGlzIiwiaXMiLCIkc2VjdGlvbiIsImluaXRpYWxpemVkIiwiJHRvZ2dsZSIsIiRjb250ZW50IiwiJGNsb3NlIiwiaXNUb3VjaCIsInNsaWRlRG93biIsInN0b3AiLCJzbGlkZVVwIiwiJHRhcmdldCIsImNsb3Nlc3QiLCJ1cCIsIiRidG4iLCJjaGF0QmxvY2siLCIkYmxvY2siLCIkb3BlbiIsImtleXByZXNzU2xpZGVyIiwiZmllbGRfbmFtZSIsImlucHV0MCIsImdldEVsZW1lbnRCeUlkIiwiaW5wdXQxIiwiaW5wdXRzIiwic3RhcnRWYWwiLCJkYXRhc2V0IiwiY3VycmVudFZhbHVlIiwiZW5kVmFsIiwibWluVmFsIiwibWluVmFsdWUiLCJtYXhWYWwiLCJtYXhWYWx1ZSIsInBvc3RmaXgiLCJzZXRTbGlkZXJIYW5kbGUiLCJyIiwibm9VaVNsaWRlciIsInNldCIsImNyZWF0ZSIsImNvbm5lY3QiLCJyYW5nZSIsIm1pbiIsIm1heCIsImZvcm1hdCIsIndOdW1iIiwiZGVjaW1hbHMiLCJ0aG91c2FuZCIsInZhbHVlcyIsImhhbmRsZSIsImlucHV0IiwicG9zaXRpb24iLCJnZXQiLCJzdGVwcyIsIndoaWNoIiwicGx1Z2luTmFtZSIsIlBsdWdpbiIsIiRzY3JvbGxDb250ZW50RWwiLCIkc2Nyb2xsYmFyRWwiLCIkZHJhZ0hhbmRsZUVsIiwiZHJhZ09mZnNldCIsImZsYXNoVGltZW91dCIsIiRlbCIsIiRjb250ZW50RWwiLCJwYWdlSnVtcE11bHRwIiwic2Nyb2xsRGlyZWN0aW9uIiwic2Nyb2xsT2Zmc2V0QXR0ciIsInNpemVBdHRyIiwib2Zmc2V0QXR0ciIsInN0YXJ0RHJhZyIsImV2ZW50T2Zmc2V0IiwicGFnZVkiLCJwYWdlWCIsImRyYWciLCJlbmREcmFnIiwic2Nyb2xsUG9zIiwib2ZmIiwianVtcFNjcm9sbCIsImp1bXBBbXQiLCJvcmlnaW5hbEV2ZW50IiwibGF5ZXJZIiwibGF5ZXJYIiwib25TY3JvbGxlZCIsImZsYXNoU2Nyb2xsYmFyIiwicmVzaXplU2Nyb2xsYmFyIiwiY29udGVudFNpemUiLCJzY3JvbGxPZmZzZXQiLCJzY3JvbGxiYXJTaXplIiwic2Nyb2xsYmFyUmF0aW8iLCJoYW5kbGVPZmZzZXQiLCJoYW5kbGVTaXplIiwiZmxvb3IiLCJjc3MiLCJsZWZ0Iiwid2lkdGgiLCJzaG93U2Nyb2xsYmFyIiwiYXV0b0hpZGUiLCJyZXNpemVTY3JvbGxDb250ZW50Iiwic2Nyb2xsYmFyV2lkdGgiLCJ0ZW1wRWwiLCJhcHBlbmQiLCJ3aWR0aE1pbnVzU2Nyb2xsYmFycyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiaW5kZXhPZiIsInJlY2FsY3VsYXRlIiwiZXh0ZW5kIiwiZm4iLCJkZWZhdWx0cyIsIm9ubG9hZCIsImZvY3VzIiwicHJlcGVuZCIsIndyYXBDb250ZW50Iiwid3JhcCIsIm9wdGlvbiIsImRlc3Ryb3kiLCJob29rTmFtZSIsImluc2VydEJlZm9yZSIsInJlbW92ZURhdGEiLCJyZXR1cm5WYWwiLCJtZXRob2ROYW1lIiwiYXJncyIsIkVycm9yIiwib25Jbml0Iiwib25EZXN0cm95IiwiY3NjcmxiIiwi0KF1c3RvbUludGVyYWN0aW9uIiwidGFyZ2V0cyIsImluaXQiLCJfdGhpczIiLCJ0b3VjaGVuZERlbGF5IiwiZXZlbnRzIiwiJHRhcmdldHMiLCIkZWxlbWVudCIsInBhcmVudE5vZGUiLCJ0eXBlIiwidG91Y2hlZCIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwic2V0QXR0cmlidXRlIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInJlbW92ZUF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6IkFBQUEsYUFFQSxJQ0ZBQSxZQUFBLENBRUFDLEdBQUEsRUFFQUMsR0FBQSxJQUVBQyxHQUFBLElBRUFDLEdBQUEsS0FFQUMsR0FBQSxNRFBBLFNBQUFDLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsSUFRQUMsRUFSQUMsRUFBQUYsR0FBQSxDQUFBLEVBQ0FHLEVBQUFELEVBQUFFLFdBQ0FBLE9BQUEsSUFBQUQsR0FBQUEsRUFDQUUsRUFB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Q0FDQSxHQUFBMEosRUFBQUMsZ0JBS0EsY0FBQXRTLEVBQUEyUyxPQUNBTixFQUFBTyxTQUNBSixFQUFBLElBQ0FBLEVBQUEsSUFBQXhTLEVBQUFDLE9BRUF1UyxFQUFBLEdBQUFPLGFBQUEsYUFBQSxJQUlBLGNBQUEvUyxFQUFBMlMsT0FDQU4sRUFBQU8sU0FDQUosRUFBQSxJQUNBQSxFQUFBLElBQUF4UyxFQUFBQyxTQUVBdVMsRUFBQSxHQUFBVSxnQkFBQSxjQUNBVixFQUFBLEdBQUFVLGdCQUFBLGVBR0EsYUFBQWxULEVBQUEyUyxPQUFBTixFQUFBTyxTQUFBSixFQUFBLEdBQ0FBLEVBQUEsR0FBQU8sYUFBQSxhQUFBLElBR0EsV0FBQS9TLEVBQUEyUyxPQUFBTixFQUFBTyxTQUFBSixFQUFBLElBQ0FBLEVBQUEsR0FBQVUsZ0JBQUEsYUFFQSxFQUVBMVQsU0FBQWxDLGlCQUFBLGFBQUFpVixHQUNBL1MsU0FBQWxDLGlCQUFBLFdBQUFpVixHQUNBL1MsU0FBQWxDLGlCQUFBLGFBQUFpVixHQUFBLEdBQ0EvUyxTQUFBbEMsaUJBQUEsYUFBQWlWLEdBQUEsR0FDQS9TLFNBQUFsQyxpQkFBQSxZQUFBaVYsR0FDQS9TLFNBQUFsQyxpQkFBQSxVQUFBaVYsR0FDQS9TLFNBQUFsQyxpQkFBQSxjQUFBaVYsRUFDQSIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKFwidXNlIHN0cmljdFwiKTtcclxuXHJcbnZhciBicmVha3BvaW50cyA9IHtcclxuXHJcbiAgeHM6IDAsXHJcblxyXG4gIHNtOiA1NzYsXHJcblxyXG4gIG1kOiA3NjgsXHJcblxyXG4gIGxnOiAxMDI0LFxyXG5cclxuICB4bDogMTI4MCxcclxuXHJcbn07XHJcblxyXG5cclxuZnVuY3Rpb24gdGhyb3R0bGUoZGVsYXksIGNhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgdmFyIF9yZWYgPSBvcHRpb25zIHx8IHt9LFxyXG4gICAgX3JlZiRub1RyYWlsaW5nID0gX3JlZi5ub1RyYWlsaW5nLFxyXG4gICAgbm9UcmFpbGluZyA9IF9yZWYkbm9UcmFpbGluZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJG5vVHJhaWxpbmcsXHJcbiAgICBfcmVmJG5vTGVhZGluZyA9IF9yZWYubm9MZWFkaW5nLFxyXG4gICAgbm9MZWFkaW5nID0gX3JlZiRub0xlYWRpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRub0xlYWRpbmcsXHJcbiAgICBfcmVmJGRlYm91bmNlTW9kZSA9IF9yZWYuZGVib3VuY2VNb2RlLFxyXG4gICAgZGVib3VuY2VNb2RlID0gX3JlZiRkZWJvdW5jZU1vZGUgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYkZGVib3VuY2VNb2RlO1xyXG5cclxuICB2YXIgdGltZW91dElEO1xyXG4gIHZhciBjYW5jZWxsZWQgPSBmYWxzZTtcclxuXHJcbiAgdmFyIGxhc3RFeGVjID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gY2xlYXJFeGlzdGluZ1RpbWVvdXQoKSB7XHJcbiAgICBpZiAodGltZW91dElEKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SUQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2FuY2VsKG9wdGlvbnMpIHtcclxuICAgIHZhciBfcmVmMiA9IG9wdGlvbnMgfHwge30sXHJcbiAgICAgIF9yZWYyJHVwY29taW5nT25seSA9IF9yZWYyLnVwY29taW5nT25seSxcclxuICAgICAgdXBjb21pbmdPbmx5ID0gX3JlZjIkdXBjb21pbmdPbmx5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHVwY29taW5nT25seTtcclxuXHJcbiAgICBjbGVhckV4aXN0aW5nVGltZW91dCgpO1xyXG4gICAgY2FuY2VsbGVkID0gIXVwY29taW5nT25seTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XHJcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzXyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgICAgYXJndW1lbnRzX1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICB2YXIgZWxhcHNlZCA9IERhdGUubm93KCkgLSBsYXN0RXhlYztcclxuXHJcbiAgICBpZiAoY2FuY2VsbGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleGVjKCkge1xyXG4gICAgICBsYXN0RXhlYyA9IERhdGUubm93KCk7XHJcbiAgICAgIGNhbGxiYWNrLmFwcGx5KHNlbGYsIGFyZ3VtZW50c18pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgICB0aW1lb3V0SUQgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFub0xlYWRpbmcgJiYgZGVib3VuY2VNb2RlICYmICF0aW1lb3V0SUQpIHtcclxuICAgICAgZXhlYygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCk7XHJcblxyXG4gICAgaWYgKGRlYm91bmNlTW9kZSA9PT0gdW5kZWZpbmVkICYmIGVsYXBzZWQgPiBkZWxheSkge1xyXG4gICAgICBpZiAobm9MZWFkaW5nKSB7XHJcbiAgICAgICAgbGFzdEV4ZWMgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBpZiAoIW5vVHJhaWxpbmcpIHtcclxuICAgICAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZGVib3VuY2VNb2RlID8gY2xlYXIgOiBleGVjLCBkZWxheSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4ZWMoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChub1RyYWlsaW5nICE9PSB0cnVlKSB7XHJcbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoXHJcbiAgICAgICAgZGVib3VuY2VNb2RlID8gY2xlYXIgOiBleGVjLFxyXG4gICAgICAgIGRlYm91bmNlTW9kZSA9PT0gdW5kZWZpbmVkID8gZGVsYXkgLSBlbGFwc2VkIDogZGVsYXlcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdyYXBwZXIuY2FuY2VsID0gY2FuY2VsO1xyXG5cclxuICByZXR1cm4gd3JhcHBlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVib3VuY2UoZGVsYXksIGNhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgdmFyIF9yZWYgPSBvcHRpb25zIHx8IHt9LFxyXG4gICAgX3JlZiRhdEJlZ2luID0gX3JlZi5hdEJlZ2luLFxyXG4gICAgYXRCZWdpbiA9IF9yZWYkYXRCZWdpbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGF0QmVnaW47XHJcblxyXG4gIHJldHVybiB0aHJvdHRsZShkZWxheSwgY2FsbGJhY2ssIHtcclxuICAgIGRlYm91bmNlTW9kZTogYXRCZWdpbiAhPT0gZmFsc2UsXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xyXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xyXG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgICAgIHJldHVybiBvYmogJiZcclxuICAgICAgICB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiZcclxuICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJlxyXG4gICAgICAgIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZVxyXG4gICAgICAgID8gXCJzeW1ib2xcIlxyXG4gICAgICAgIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgfVxyXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNsaWRlckRlYm91bmNlKGZ1bmMsIGludGVydmFsLCBjb250ZXh0KSB7XHJcbiAgdmFyIHRpbWVvdXQgPSBmYWxzZTtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHMsXHJcbiAgICAgIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQgfHwgX3RoaXMsIF9hcmd1bWVudHMpO1xyXG4gICAgfSwgaW50ZXJ2YWwpO1xyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IFNsaWRlckNvbnN0cnVjdG9yID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIFNsaWRlckNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbGlkZXJDb25zdHJ1Y3Rvcik7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhTbGlkZXJDb25zdHJ1Y3RvciwgW1xyXG4gICAge1xyXG4gICAgICBrZXk6IFwiaW5pdFwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICBsZXQgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5hdXRvcGxheSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF1dG9wbGF5LXRpbWVvdXRcIikgIT09IG51bGw7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuYXV0b3BsYXlUaW1lb3V0ID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF1dG9wbGF5LXRpbWVvdXRcIikgfHwgNTAwMDtcclxuICAgICAgICB0aGlzLnBhcmFtcy5hcnJvd3MgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uby1hcnJvd3NcIikgPT09IG51bGwgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDU3NS45OHB4KVwiKTtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgbWVkaWEgcXVlcnkgaXMgdHJ1ZVxyXG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5Lm1hdGNoZXMpIHtcclxuICAgICAgICAgIHRoaXMucGFyYW1zLmRvdHMgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uby1kb3RzXCIpID09PSBudWxsID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnBhcmFtcy5kb3RzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFyYW1zLmFkYXB0aXZlSGVpZ2h0ID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtYWRhcHRpdmUtaGVpZ2h0XCIpICE9PSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLmNlbnRlck1vZGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jZW50ZXJcIikgPT09IG51bGwgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuY291bnQgPSB7fTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC54cyA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZXNcIikgfHwgMTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC5zbSA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbS1zbGlkZXNcIikgfHwgdGhpcy5wYXJhbXMuY291bnQueHM7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuY291bnQubWQgPSArdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWQtc2xpZGVzXCIpIHx8IHRoaXMucGFyYW1zLmNvdW50LnNtO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLmNvdW50LmxnID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxnLXNsaWRlc1wiKSB8fCB0aGlzLnBhcmFtcy5jb3VudC5tZDtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC54bCA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS14bC1zbGlkZXNcIikgfHwgdGhpcy5wYXJhbXMuY291bnQubGc7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMucm93cyA9IHt9O1xyXG4gICAgICAgICh0aGlzLnBhcmFtcy5yb3dzLnhzID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd3NcIikgfHwgMSksXHJcbiAgICAgICAgICAodGhpcy5wYXJhbXMucm93cy5zbSA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbS1yb3dzXCIpIHx8IHRoaXMucGFyYW1zLnJvd3MueHMpLFxyXG4gICAgICAgICAgKHRoaXMucGFyYW1zLnJvd3MubWQgPSArdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWQtcm93c1wiKSB8fCB0aGlzLnBhcmFtcy5yb3dzLnNtKSxcclxuICAgICAgICAgICh0aGlzLnBhcmFtcy5yb3dzLmxnID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxnLXJvd3NcIikgfHwgdGhpcy5wYXJhbXMucm93cy5tZCksXHJcbiAgICAgICAgICAodGhpcy5wYXJhbXMucm93cy54bCA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS14bC1yb3dzXCIpIHx8IHRoaXMucGFyYW1zLnJvd3MubGcpO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLnN0YXRlID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcclxuICAgICAgICAgIGxldCBicmVha3BvaW50ID0gaW5kZXggIT09IDAgPyBcIi1cIiArIGtleSArIFwiLVwiIDogXCItXCI7XHJcblxyXG4gICAgICAgICAgbGV0IGF0dHIgPSBfdGhpczMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwibW91bnRlZFwiKSk7XHJcblxyXG4gICAgICAgICAgaWYgKGF0dHIgPT09IG51bGwgJiYgaW5kZXggIT09IDApIHtcclxuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cylbaW5kZXggLSAxXTtcclxuICAgICAgICAgICAgX3RoaXMzLnBhcmFtcy5zdGF0ZVtrZXldID0gX3RoaXMzLnBhcmFtcy5zdGF0ZVtwcmV2S2V5XTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoYXR0ciA9PT0gXCJ0cnVlXCIgfHwgKGluZGV4ID09PSAwICYmIGF0dHIgIT09IFwiZmFsc2VcIikpIHtcclxuICAgICAgICAgICAgX3RoaXMzLnBhcmFtcy5zdGF0ZVtrZXldID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzMy5wYXJhbXMuc3RhdGVba2V5XSA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2xpZGVzID0gW107XHJcbiAgICAgICAgdGhpcy5jb250YWluc01vYmlsZUhpZGRlblNsaWRlcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgICAgICBpZiAoIXNsaWRlLnRhZ05hbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBpZiAoc2xpZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS1tb2JpbGUtaGlkZGVuXCIpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIF90aGlzMy5jb250YWluc01vYmlsZUhpZGRlblNsaWRlcyA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgX3RoaXMzLnNsaWRlcy5wdXNoKHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUljb25zKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NsaWRlclN0YXRlKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NsaWRlclN0YXRlRGVib3VuY2VkID0gc2xpZGVyRGVib3VuY2UodGhpcy5jaGVja1NsaWRlclN0YXRlLCA1MDAsIHRoaXMpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuY2hlY2tTbGlkZXJTdGF0ZURlYm91bmNlZCk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY3JlYXRlSWNvbnNcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUljb25zKCkge1xyXG4gICAgICAgIGxldCBsZWZ0SWNvbiA9XHJcbiAgICAgICAgICAnXFxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDExIDE5XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cXG4gICAgICAgIDxwYXRoIGQ9XCJNMS40IDE4LjFMMCAxNi43TDcuNiA5LjEwMDAxTDAgMS41TDEuNCAwTDEwLjQgOS4xMDAwMUMxMC40IDkuMTAwMDEgMS4zIDE4LjEgMS40IDE4LjFaXCIvPlxcbiAgICAgIDwvc3ZnPlxcbiAgICAnO1xyXG4gICAgICAgIGxldCByaWdodEljb24gPVxyXG4gICAgICAgICAgJ1xcbiAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAxMSAxOVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XFxuICAgICAgICA8cGF0aCBkPVwiTTkuMDAwMzkgNy4yNDc5MmUtMDVMMTAuNDAwNCAxLjQwMDA3TDIuODAwMzkgOS4wMDAwOUwxMC40MDA0IDE2LjYwMDFMOS4wMDAzOSAxOC4xMDAxTDAuMDAwMzkxMDA2IDkuMDAwMDlDMC4wMDAzOTEwMDYgOS4wMDAwOSA5LjEwMDM5IDcuMjQ3OTJlLTA1IDkuMDAwMzkgNy4yNDc5MmUtMDVaXCIvPlxcbiAgICAgIDwvc3ZnPlxcbiAgICAnO1xyXG4gICAgICAgIGxldCBsZWZ0SWNvbkNsYXNzID0gXCJjdXN0b20taWNvbi1sZWZ0XCI7XHJcbiAgICAgICAgbGV0IHJpZ2h0SWNvbkNsYXNzID0gXCJjdXN0b20taWNvbi1yaWdodFwiO1xyXG4gICAgICAgIGxldCBjdXN0b21JY29ucyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICAgICAgXCIuXCIuY29uY2F0KGxlZnRJY29uQ2xhc3MsIFwiLCAuXCIpLmNvbmNhdChyaWdodEljb25DbGFzcylcclxuICAgICAgICApO1xyXG4gICAgICAgIGN1c3RvbUljb25zLmZvckVhY2goZnVuY3Rpb24gKGljb24pIHtcclxuICAgICAgICAgIGxldCBpc0xlZnRJY29uID0gaWNvbi5jbGFzc0xpc3QuY29udGFpbnMobGVmdEljb25DbGFzcyk7XHJcbiAgICAgICAgICBsZXQgaXNSaWdodEljb24gPSBpY29uLmNsYXNzTGlzdC5jb250YWlucyhyaWdodEljb25DbGFzcyk7XHJcblxyXG4gICAgICAgICAgaWYgKGlzTGVmdEljb24pIHtcclxuICAgICAgICAgICAgaWNvbi5jbGFzc0xpc3QucmVtb3ZlKGxlZnRJY29uQ2xhc3MpO1xyXG4gICAgICAgICAgICBsZWZ0SWNvbiA9IGljb24ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1JpZ2h0SWNvbikge1xyXG4gICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUocmlnaHRJY29uQ2xhc3MpO1xyXG4gICAgICAgICAgICByaWdodEljb24gPSBpY29uLm91dGVySFRNTDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpY29uLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubmV4dEFycm93ID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbl9zdHlsZS0xIHNsaWNrLW5leHRcIj4nLmNvbmNhdChcclxuICAgICAgICAgIGxlZnRJY29uLFxyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5wcmV2QXJyb3cgPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b24gYnV0dG9uX3N0eWxlLTEgc2xpY2stcHJldlwiPicuY29uY2F0KFxyXG4gICAgICAgICAgcmlnaHRJY29uLFxyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY2hlY2tTbGlkZXJTdGF0ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTbGlkZXJTdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIHRoaXMuc2F2ZWRXaW5kb3dXaWR0aCA9PT0gd2luZG93LmlubmVyV2lkdGgpIHJldHVybjtcclxuICAgICAgICB0aGlzLnNhdmVkV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xyXG4gICAgICAgICAgdGhpcy51bm1vdW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3RhdGU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSBicmVha3BvaW50c1ticmVha3BvaW50XSkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMucGFyYW1zLnN0YXRlW2JyZWFrcG9pbnRdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuY29udGFpbnNNb2JpbGVIaWRkZW5TbGlkZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1NsaWRlc1Zpc2liaWxpdHkoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLm1vdW50KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY2hlY2tTbGlkZXNWaXNpYmlsaXR5XCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1NsaWRlc1Zpc2liaWxpdHkoKSB7XHJcbiAgICAgICAgbGV0IF90aGlzNCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgICAgICBzbGlkZS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICAgICAgbGV0IHNob3VsZEJlSGlkZGVuID0gc2xpZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS1tb2JpbGUtaGlkZGVuXCIpICE9PSBudWxsO1xyXG4gICAgICAgICAgbGV0IGJyZWFrcG9pbnQgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IGJyZWFrcG9pbnRzLnNtO1xyXG5cclxuICAgICAgICAgIGlmICghKHNob3VsZEJlSGlkZGVuICYmIGJyZWFrcG9pbnQpKSB7XHJcbiAgICAgICAgICAgIF90aGlzNC5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLCBzbGlkZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwibW91bnRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5zbGljayh7XHJcbiAgICAgICAgICBhdXRvcGxheTogdGhpcy5wYXJhbXMuYXV0b3BsYXksXHJcbiAgICAgICAgICBhdXRvcGxheVNwZWVkOiB0aGlzLnBhcmFtcy5hdXRvcGxheVRpbWVvdXQsXHJcbiAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQueHMsXHJcbiAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQueHMsXHJcbiAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnhzLFxyXG4gICAgICAgICAgcHJldkFycm93OiB0aGlzLnByZXZBcnJvdyxcclxuICAgICAgICAgIG5leHRBcnJvdzogdGhpcy5uZXh0QXJyb3csXHJcbiAgICAgICAgICBhcnJvd3M6IHRoaXMucGFyYW1zLmFycm93cyxcclxuICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0aGlzLnBhcmFtcy5hZGFwdGl2ZUhlaWdodCxcclxuICAgICAgICAgIGRvdHM6IHRoaXMucGFyYW1zLmRvdHMsXHJcbiAgICAgICAgICBjZW50ZXJNb2RlOiB0aGlzLnBhcmFtcy5jZW50ZXJNb2RlLFxyXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eTogZmFsc2UsXHJcbiAgICAgICAgICByZXNwb25zaXZlOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5zbSAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQuc20sXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQuc20sXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnNtLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5tZCAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQubWQsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQubWQsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLm1kLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5sZyAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQubGcsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQubGcsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLmxnLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy54bCAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQueGwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQueGwsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnhsLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwidW5tb3VudFwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdW5tb3VudCgpIHtcclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuc2xpY2soXCJ1bnNsaWNrXCIpO1xyXG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIFNsaWRlckNvbnN0cnVjdG9yO1xyXG59KSgpO1xyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xyXG4gICQoXCIuY2F0YWxvZy1maWx0ZXItYWNjb3JkaW9uIGEub3BlbmVyXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQodGhpcykucGFyZW50KCkuZmluZChcInVsOmZpcnN0XCIpLnNsaWRlVG9nZ2xlKCk7XHJcbiAgICAkKHRoaXMpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtZXhwYW5kXVwiKS5vbihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRhcmdldC5wYXJlbnQoKTtcclxuICAgIHBhcmVudC5maW5kKFwiW2RhdGEtY29sbGFwc2UtY29udGVudF1cIikucmVtb3ZlQ2xhc3MoXCJkLW5vbmVcIik7XHJcbiAgICBwYXJlbnQuZmluZChcIltkYXRhLWNvbGxhcHNlXVwiKS5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgIHRhcmdldC5hZGRDbGFzcyhcImQtbm9uZVwiKTtcclxuICB9KTtcclxuXHJcbiAgJChcIltkYXRhLWNvbGxhcHNlXVwiKS5vbihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRhcmdldC5wYXJlbnQoKTtcclxuICAgIHBhcmVudC5maW5kKFwiW2RhdGEtY29sbGFwc2UtY29udGVudF1cIikuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XHJcbiAgICBwYXJlbnQuZmluZChcIltkYXRhLWV4cGFuZF1cIikucmVtb3ZlQ2xhc3MoXCJkLW5vbmVcIik7XHJcbiAgICB0YXJnZXQuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1leHBhbmQtbWVudV1cIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAkKFwiLm1vYmlsZS1zaWRlLW1lbnVfX2JhY2tncm91bmRcIikuYWRkQ2xhc3MoXCJkLWJsb2NrXCIpO1xyXG4gICAgJChcIi5tb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRcIikuYWRkQ2xhc3MoXCJtb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRfYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtY29sbGFwc2UtbWVudV1cIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAkKFwiLm1vYmlsZS1zaWRlLW1lbnVfX2JhY2tncm91bmRcIikucmVtb3ZlQ2xhc3MoXCJkLWJsb2NrXCIpO1xyXG4gICAgJChcIi5tb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRcIikucmVtb3ZlQ2xhc3MoXCJtb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRfYWN0aXZlXCIpO1xyXG4gICAgJChgW2RhdGEtbWVudS1wYWdlXTpub3QoOmZpcnN0LWNoaWxkKWApLnJlbW92ZUNsYXNzKFwibW9iaWxlLXNpZGUtbWVudS1jb250ZW50X19wYWdlX2FjdGl2ZVwiKTtcclxuICB9KTtcclxuXHJcbiAgJChcIltkYXRhLW1lbnUtcGFnZS1leHBhbmRdXCIpLm9uKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBpZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuYXR0cihcImRhdGEtbWVudS1wYWdlLWV4cGFuZFwiKTtcclxuICAgICQoYFtkYXRhLW1lbnUtcGFnZT1cIiR7aWR9XCJdYCkuYWRkQ2xhc3MoXCJtb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRfX3BhZ2VfYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtbWVudS1wYWdlLWNvbGxhcHNlXVwiKS5vbihcImNsaWNrXCIsIChldmVudCkgPT4ge1xyXG4gICAgY29uc3QgaWQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmF0dHIoXCJkYXRhLW1lbnUtcGFnZS1jb2xsYXBzZVwiKTtcclxuICAgICQoYFtkYXRhLW1lbnUtcGFnZT1cIiR7aWR9XCJdYCkucmVtb3ZlQ2xhc3MoXCJtb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRfX3BhZ2VfYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtb3Blbi1ib3R0b20tZHJvcGRvd25dXCIpLm9uKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICAkKFwiLmJvdHRvbS1tb2JpbGUtbWVudS1saXN0XCIpLnRvZ2dsZUNsYXNzKFwiYm90dG9tLW1vYmlsZS1tZW51LWxpc3RfYWN0aXZlXCIpO1xyXG4gICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS50b2dnbGVDbGFzcyhcImJvdHRvbS1tb2JpbGUtbWVudS1idXR0b25fYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtY2xvc2Utc2VhcmNoLW1vZGFsXVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICQoXCIuc2VhcmNoLW1vZGFsLXdpbmRvd1wiKS5yZW1vdmVDbGFzcyhcImQtYmxvY2tcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1vcGVuLXNlYXJjaC1tb2RhbF1cIikub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAkKFwiLnNlYXJjaC1tb2RhbC13aW5kb3dcIikuYWRkQ2xhc3MoXCJkLWJsb2NrXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX3NlY3RvclwiKS5vbihcIm1vdXNlbW92ZVwiLCAoZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHRhcmdldCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XHJcbiAgICBjb25zdCBpZCA9IHRhcmdldC5hdHRyKFwiZGF0YS1zZWN0b3JcIik7XHJcbiAgICBjb25zdCBwYXJlbnQgPSB0YXJnZXQucGFyZW50KCkucGFyZW50KCk7XHJcbiAgICBwYXJlbnRcclxuICAgIC5maW5kKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKVxyXG4gICAgLnJlbW92ZUNsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgcGFyZW50XHJcbiAgICAuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpXHJcbiAgICAucmVtb3ZlQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gICAgcGFyZW50LmZpbmQoYFtkYXRhLXNlY3Rvci1pbWFnZT1cIiR7aWR9XCJdYCkuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWRvdD1cIiR7aWR9XCJdYCkuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICBsZXQgdG91Y2hzdGFydFggPSAwO1xyXG4gIGxldCB0b3VjaGVuZFggPSAwO1xyXG5cclxuICAkKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX3NlY3RvcnNcIikub24oXCJ0b3VjaHN0YXJ0XCIsIChldmVudCkgPT4ge1xyXG4gICAgdG91Y2hzdGFydFggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5zY3JlZW5YO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX3NlY3RvcnNcIikub24oXCJ0b3VjaGVuZFwiLCAoZXZlbnQpID0+IHtcclxuICAgIHRvdWNoZW5kWCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblg7XHJcbiAgICBjb25zdCBwYXJlbnQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnBhcmVudCgpO1xyXG4gICAgY29uc3QgaW1nID0gcGFyZW50LmZpbmQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgY29uc3QgaWQgPSBOdW1iZXIoaW1nLmF0dHIoXCJkYXRhLXNlY3Rvci1pbWFnZVwiKSk7XHJcbiAgICBjb25zdCBsZW5ndGggPSBwYXJlbnQuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZVwiKS5sZW5ndGg7XHJcblxyXG4gICAgaWYgKHRvdWNoZW5kWCA8IHRvdWNoc3RhcnRYKSB7XHJcbiAgICAgIHBhcmVudFxyXG4gICAgICAuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIilcclxuICAgICAgLnJlbW92ZUNsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgICBwYXJlbnRcclxuICAgICAgLmZpbmQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKVxyXG4gICAgICAucmVtb3ZlQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gICAgICBpZiAoaWQgPj0gbGVuZ3RoKSB7XHJcbiAgICAgICAgcGFyZW50LmZpbmQoYFtkYXRhLXNlY3Rvci1pbWFnZT1cIiR7MX1cIl1gKS5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKTtcclxuICAgICAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWRvdD1cIiR7MX1cIl1gKS5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHBhcmVudFxyXG4gICAgICAuZmluZChgW2RhdGEtc2VjdG9yLWltYWdlPVwiJHtpZCArIDF9XCJdYClcclxuICAgICAgLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWRvdD1cIiR7aWQgKyAxfVwiXWApLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIGlmICh0b3VjaGVuZFggPiB0b3VjaHN0YXJ0WCkge1xyXG4gICAgICBwYXJlbnRcclxuICAgICAgLmZpbmQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpXHJcbiAgICAgIC5yZW1vdmVDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKTtcclxuICAgICAgcGFyZW50XHJcbiAgICAgIC5maW5kKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIilcclxuICAgICAgLnJlbW92ZUNsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKTtcclxuICAgICAgaWYgKGlkIDw9IDEpIHtcclxuICAgICAgICBwYXJlbnRcclxuICAgICAgICAuZmluZChgW2RhdGEtc2VjdG9yLWltYWdlPVwiJHtsZW5ndGh9XCJdYClcclxuICAgICAgICAuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICAgICAgcGFyZW50LmZpbmQoYFtkYXRhLXNlY3Rvci1kb3Q9XCIke2xlbmd0aH1cIl1gKS5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIik7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIHBhcmVudFxyXG4gICAgICAuZmluZChgW2RhdGEtc2VjdG9yLWltYWdlPVwiJHtpZCAtIDF9XCJdYClcclxuICAgICAgLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWRvdD1cIiR7aWQgLSAxfVwiXWApLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJChcIi5saWtlLWJ0blwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgfSk7XHJcbiAgJChcIi5jaXR5LXNlbGVjdGlvbl9fbGlua1wiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmNpdHktc2VsZWN0aW9uX19saXN0XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKHdpbmRvdykuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiY2l0eS1zZWxlY3Rpb25fX2xpbmtcIikpIHtcclxuICAgICAgJChcIi5jaXR5LXNlbGVjdGlvbl9fbGlzdFwiKS50b2dnbGUoZmFsc2UpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gICQoXCIuYnVyZ2VyLW1lbnVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5tb2JpbGUtbWVudVwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5jYXRhbG9nLWlubmVyLWJ0blwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcIm9wZW5cIik7XHJcbiAgICAkKFwiLmNhdGFsb2ctaGVhZGVyLWNvbnRlbnRcIikudG9nZ2xlKDApO1xyXG4gIH0pO1xyXG4gICQoXCIuY2F0YWxvZy1pbm5lci1idG4sLmNhdGFsb2ctbWVudV9faGVhZCBhXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkKFwiLmNhdGFsb2ctbWVudVwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5idXJnZXItY2F0YWxvZ1wiKS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcIm9wZW5cIik7XHJcbiAgfSk7XHJcbiAgJChcIi5zaGFyZS1idG5cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5zaGFyZS1ibG9ja19fc2hvd1wiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5jbG9zZS1wYW5lbFwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmJvdHRvbS1wYW5lbFwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5maWx0ZXItYnRuLCAuY2xvc2UtYnRuLTJcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5jYXRhbG9nLWZpbHRlclwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5jYXRhbG9nLXNpZGVfX3RpdGxlXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIuY2F0YWxvZy1zaWRlX19jb250ZW50XCIpLnRvZ2dsZSgwKTtcclxuICAgICQoXCIuY2F0YWxvZy1zaWRlX19jb250ZW50LWFjY29yZGVvblwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5jYXRhbG9nLW9wZW5lZFwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmNhdGFsb2ctb3BlbmVkIC5zdWJtZW51XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmJ1cmdlci1tZW51XCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJtZW51LW9uXCIpO1xyXG4gIH0pO1xyXG4gICQoXCIuY2F0YWxvZy1pbm5lclwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwib3BlblwiKTtcclxuICAgICQoXCIuY2F0YWxvZy1pbm5lci1jb250ZW50XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxufSk7XHJcblxyXG4kKGZ1bmN0aW9uICgpIHtcclxuICAvLyBUaGlzIHdpbGwgc2VsZWN0IGV2ZXJ5dGhpbmcgd2l0aCB0aGUgY2xhc3Mgc21vb3RoU2Nyb2xsXHJcbiAgLy8gVGhpcyBzaG91bGQgcHJldmVudCBwcm9ibGVtcyB3aXRoIGNhcm91c2VsLCBzY3JvbGxzcHksIGV0Yy4uLlxyXG4gICQoXCIuc21vb3RoU2Nyb2xsXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChcclxuICAgICAgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sIFwiXCIpID09IHRoaXMucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sIFwiXCIpICYmXHJcbiAgICAgIGxvY2F0aW9uLmhvc3RuYW1lID09IHRoaXMuaG9zdG5hbWVcclxuICAgICkge1xyXG4gICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzLmhhc2gpO1xyXG4gICAgICB0YXJnZXQgPSB0YXJnZXQubGVuZ3RoID8gdGFyZ2V0IDogJChcIltuYW1lPVwiICsgdGhpcy5oYXNoLnNsaWNlKDEpICsgXCJdXCIpO1xyXG5cclxuICAgICAgaWYgKHRhcmdldC5sZW5ndGgpIHtcclxuICAgICAgICAkKFwiaHRtbCxib2R5XCIpLmFuaW1hdGUoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHNjcm9sbFRvcDogdGFyZ2V0Lm9mZnNldCgpLnRvcCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAxMDAwXHJcbiAgICAgICAgKTsgLy8gVGhlIG51bWJlciBoZXJlIHJlcHJlc2VudHMgdGhlIHNwZWVkIG9mIHRoZSBzY3JvbGwgaW4gbWlsbGlzZWNvbmRzXHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuXHJcbnZhciBiaWdTbGlkZXMgPSAkKFwiLm1haW4tc2xpZGVyIC5vd2wtY2Fyb3VzZWxcIiksXHJcbiAgYXV0b1BsYXlUaW1lb3V0U2VjID0gcGFyc2VJbnQoYmlnU2xpZGVzLmRhdGEoXCJhdXRvcGxheS10aW1lb3V0XCIpKTtcclxuYmlnU2xpZGVzLm93bENhcm91c2VsKHtcclxuICBsb29wOiB0cnVlLFxyXG4gIG1hcmdpbjogNSxcclxuICBuYXY6IHRydWUsXHJcbiAgZG90czogdHJ1ZSxcclxuICBpdGVtczogMSxcclxuICBhdXRvcGxheTogdHJ1ZSxcclxuICBhdXRvcGxheVRpbWVvdXQ6IGF1dG9QbGF5VGltZW91dFNlYyAqIDEwMDAsXHJcbiAgbmF2VGV4dDogW1xyXG4gICAgJzxzdmcgY2xhc3M9XCJpY29uXCIgdmlld0JveD1cIjAgMCAxMC41IDE4LjFcIj48cGF0aCBzdHJva2U9XCJub25lXCIgZD1cIk05LDBsMS40LDEuNEwyLjgsOWw3LjYsNy42TDksMTguMUwwLDlDMCw5LDkuMSwwLDksMHpcIj48L3BhdGg+PC9zdmc+JyxcclxuICAgICc8c3ZnIGNsYXNzPVwiaWNvblwiIHZpZXdCb3g9XCIwIDAgMTAuNSAxOC4xXCI+PHBhdGggc3Ryb2tlPVwibm9uZVwiIGQ9XCJNMS40LDE4LjFMMCwxNi43bDcuNi03LjZMMCwxLjVMMS40LDBsOSw5LjFDMTAuNCw5LjEsMS4zLDE4LjEsMS40LDE4LjF6XCI+PC9wYXRoPjwvc3ZnPicsXHJcbiAgXSxcclxufSk7XHJcbnZhciByYWRpb0J1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGVsaXZlcnktc2VsZWN0aW9uIGlucHV0W3R5cGU9XCJyYWRpb1wiXScpO1xyXG52YXIgY2hvaWNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZGVsaXZlcnktY2hvaWNlXCIpO1xyXG5yYWRpb0J1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnRuKSB7XHJcbiAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGNsaWNrZWQgPSB0aGlzO1xyXG4gICAgY2hvaWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChjaG9pY2UpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGNob2ljZS5jbGFzc0xpc3QuY29udGFpbnMoY2xpY2tlZC5pZCkgfHxcclxuICAgICAgICBjaG9pY2UuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGVsaXZlcnktdHlwZS1cIiArIGNsaWNrZWQudmFsdWUpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGNob2ljZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNob2ljZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuJChcIi5zaG9wcGluZy1jYXJ0LWl0ZW1fX2RlbGV0ZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgJCh0aGlzKS5wYXJlbnQoXCIuc2hvcHBpbmctY2FydC1pdGVtXCIpLnJlbW92ZSgpO1xyXG59KTtcclxuJChcIi5zbGlkZXIgLm93bC1jYXJvdXNlbFwiKS5vd2xDYXJvdXNlbCh7XHJcbiAgbG9vcDogdHJ1ZSxcclxuICBtYXJnaW46IDAsXHJcbiAgaXRlbXM6IDEsXHJcbiAgbmF2OiB0cnVlLFxyXG59KTtcclxuJChcIi5uZXdzLXNsaWRlciAub3dsLWNhcm91c2VsXCIpLm93bENhcm91c2VsKHtcclxuICBsb29wOiB0cnVlLFxyXG4gIG1hcmdpbjogMCxcclxuICBpdGVtczogNCxcclxuICByZXNwb25zaXZlOiB7XHJcbiAgICAwOiB7XHJcbiAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiAxLFxyXG4gICAgfSxcclxuICAgIDQ3OToge1xyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBpdGVtczogMixcclxuICAgIH0sXHJcbiAgICA3Njg6IHtcclxuICAgICAgbmF2OiB0cnVlLFxyXG4gICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgaXRlbXM6IDMsXHJcbiAgICB9LFxyXG4gICAgOTkyOiB7XHJcbiAgICAgIGl0ZW1zOiA0LFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuJChcIi5hY3Rpb24tc2xpZGVyIC5vd2wtY2Fyb3VzZWxcIikub3dsQ2Fyb3VzZWwoe1xyXG4gIGxvb3A6IHRydWUsXHJcbiAgbWFyZ2luOiAyMCxcclxuICBuYXY6IHRydWUsXHJcbiAgZG90czogZmFsc2UsXHJcbiAgaXRlbXM6IDMsXHJcbiAgcmVzcG9uc2l2ZToge1xyXG4gICAgMDoge1xyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBpdGVtczogMSxcclxuICAgIH0sXHJcbiAgICA0Nzk6IHtcclxuICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgaXRlbXM6IDIsXHJcbiAgICB9LFxyXG4gICAgNzY4OiB7XHJcbiAgICAgIG5hdjogdHJ1ZSxcclxuICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgIGl0ZW1zOiAzLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuJChcIi5wYXJ0bmVycy1zbGlkZXIgLm93bC1jYXJvdXNlbFwiKS5vd2xDYXJvdXNlbCh7XHJcbiAgbG9vcDogdHJ1ZSxcclxuICBtYXJnaW46IDAsXHJcbiAgbmF2OiB0cnVlLFxyXG4gIGRvdHM6IGZhbHNlLFxyXG4gIGl0ZW1zOiA1LFxyXG4gIHJlc3BvbnNpdmU6IHtcclxuICAgIDA6IHtcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgaXRlbXM6IDEsXHJcbiAgICB9LFxyXG4gICAgNTY2OiB7XHJcbiAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiAyLFxyXG4gICAgfSxcclxuICAgIDc2ODoge1xyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBpdGVtczogMyxcclxuICAgIH0sXHJcbiAgICA5MDA6IHtcclxuICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgaXRlbXM6IDQsXHJcbiAgICB9LFxyXG4gICAgOTUwOiB7XHJcbiAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbihmdW5jdGlvbiAoJCkge1xyXG4gIHZhciBjdXN0b21TZWxlY3QgPSAkKFwic2VsZWN0LmN1c3RvbS1zZWxlY3RcIik7IC8vIEZJUlNULCBjcmVhdGUgdGhlIGN1c3RvbSBzZWxlY3QgbWVudXMgZnJvbSB0aGUgZXhpc3Rpbmcgc2VsZWN0XHJcblxyXG4gIGN1c3RvbVNlbGVjdC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0aGF0ID0gJCh0aGlzKTtcclxuICAgIHZhciBsaXN0SUQgPSB0aGF0LmF0dHIoXCJpZFwiKSxcclxuICAgICAgZ3JvdXBzID0gdGhhdC5jaGlsZHJlbihcIm9wdGdyb3VwXCIpLFxyXG4gICAgICB0aGVPcHRpb25zID0gXCJcIixcclxuICAgICAgc3RhcnRpbmdPcHRpb24gPSBcIlwiLFxyXG4gICAgICBjdXN0b21TZWxlY3QgPSBcIlwiOyAvL2NoZWNrIGlmIHRoZXJlIGFyZSBvcHRpb24gZ3JvdXBzXHJcblxyXG4gICAgaWYgKGdyb3Vwcy5sZW5ndGgpIHtcclxuICAgICAgZ3JvdXBzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJHcm91cCA9ICQodGhpcyk7XHJcbiAgICAgICAgdmFyIGN1ck5hbWUgPSBjdXJHcm91cC5hdHRyKFwibGFiZWxcIik7IC8vT3BlbiB0aGUgb3B0aW9uIGdyb3VwXHJcblxyXG4gICAgICAgIHRoZU9wdGlvbnMgKz0gJzxsaSBjbGFzcz1cIm9wdGdyb3VwXCI+JyArIGN1ck5hbWUgKyBcIjwvbGk+XCI7IC8vZ2V0IHRoZSBvcHRpb25zXHJcblxyXG4gICAgICAgIGN1ckdyb3VwLmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIGN1ck9wdCA9ICQodGhpcyk7XHJcbiAgICAgICAgICB2YXIgY3VyVmFsID0gY3VyT3B0LmF0dHIoXCJ2YWx1ZVwiKSxcclxuICAgICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSBjdXJPcHQuYXR0cihcInNlbGVjdGVkXCIpO1xyXG5cclxuICAgICAgICAgIGlmIChpc1NlbGVjdGVkID09PSBcInNlbGVjdGVkXCIpIHtcclxuICAgICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgICB0aGVPcHRpb25zICs9ICc8bGkgY2xhc3M9XCJzZWxlY3RlZFwiIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pOyAvL0Nsb3NlIHRoZSBvcHRpb24gZ3JvdXBcclxuICAgICAgICAvL3RoZU9wdGlvbnMgKz0gJzxsaSBjbGFzcz1cIm9wdGdyb3VwLWNsb3NlXCI+PC9saT4nO1xyXG4gICAgICB9KTsgLy9hZGQgb3B0aW9ucyBub3QgaW4gYSBncm91cCB0byB0aGUgdG9wIG9mIHRoZSBsaXN0XHJcblxyXG4gICAgICB0aGF0LmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJPcHQgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBjdXJWYWwgPSBjdXJPcHQuYXR0cihcInZhbHVlXCIpLFxyXG4gICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICBpc1NlbGVjdGVkID0gY3VyT3B0LmF0dHIoXCJzZWxlY3RlZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQgPT09IFwic2VsZWN0ZWRcIikge1xyXG4gICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyA9XHJcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJzZWxlY3RlZFwiIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiICsgdGhlT3B0aW9ucztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyA9ICc8bGkgZGF0YS12YWx1ZT1cIicgKyBjdXJWYWwgKyAnXCI+JyArIGN1ckh0bWwgKyBcIjwvbGk+XCIgKyB0aGVPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGF0LmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJPcHQgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBjdXJWYWwgPSBjdXJPcHQuYXR0cihcInZhbHVlXCIpLFxyXG4gICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICBpc1NlbGVjdGVkID0gY3VyT3B0LmF0dHIoXCJzZWxlY3RlZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQgPT09IFwic2VsZWN0ZWRcIikge1xyXG4gICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGNsYXNzPVwic2VsZWN0ZWRcIiBkYXRhLXZhbHVlPVwiJyArIGN1clZhbCArICdcIj4nICsgY3VySHRtbCArIFwiPC9saT5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IC8vYnVpbGQgdGhlIGN1c3RvbSBzZWxlY3RcclxuXHJcbiAgICBjdXN0b21TZWxlY3QgPVxyXG4gICAgICAnPGRpdiBjbGFzcz1cImRyb3Bkb3duLWNvbnRhaW5lclwiPjxkaXYgY2xhc3M9XCJkcm9wZG93bi1zZWxlY3QgZW50eXBvLWRvd24tb3Blbi1iaWdcIj48c3ZnIGNsYXNzPVwiaWNvblwiPjx1c2UgeGxpbms6aHJlZj1cIiN0YWItYXJyb3dcIj48L3VzZT48L3N2Zz48c3Bhbj4nICtcclxuICAgICAgc3RhcnRpbmdPcHRpb24gK1xyXG4gICAgICAnPC9zcGFuPjwvZGl2Pjx1bCBjbGFzcz1cImRyb3Bkb3duLXNlbGVjdC11bFwiIGRhdGEtcm9sZT1cIicgK1xyXG4gICAgICBsaXN0SUQgK1xyXG4gICAgICAnXCI+JyArXHJcbiAgICAgIHRoZU9wdGlvbnMgK1xyXG4gICAgICBcIjwvdWw+PC9kaXY+IDwhLS0gLmN1c3RvbS1zZWxlY3Qtd3JhcHBlciAtLT5cIjsgLy9hcHBlbmQgaXQgYWZ0ZXIgdGhlIGFjdHVhbCBzZWxlY3RcclxuXHJcbiAgICAkKGN1c3RvbVNlbGVjdCkuaW5zZXJ0QWZ0ZXIodGhhdCk7XHJcbiAgfSk7XHJcbiAgdmFyIHNlbGVjdGRkID0gJChcIi5kcm9wZG93bi1zZWxlY3RcIiksXHJcbiAgICBzZWxlY3R1bCA9ICQoXCIuZHJvcGRvd24tc2VsZWN0LXVsXCIpLFxyXG4gICAgc2VsZWN0bGkgPSAkKFwiLmRyb3Bkb3duLXNlbGVjdC11bCBsaVwiKTsgLy9USEVOIG1ha2UgdGhlbSB3b3JrXHJcblxyXG4gIHNlbGVjdGRkLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pOyAvL0hpZGUgaXQgb24gbW91c2VsZWF2ZVxyXG5cclxuICBzZWxlY3R1bC5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pOyAvL3NlbGVjdCB0aGUgb3B0aW9uXHJcblxyXG4gIHNlbGVjdGxpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRoYXQgPSAkKHRoaXMpOyAvL2Vuc3VyZSBjbGlja2luZyBncm91cCBsYWJlbHMgZG9lcyBub3QgY2F1c2UgY2hhbmdlXHJcblxyXG4gICAgaWYgKCF0aGF0Lmhhc0NsYXNzKFwib3B0Z3JvdXBcIikpIHtcclxuICAgICAgdmFyIHBhcmVudFVsID0gdGhhdC5wYXJlbnQoXCJ1bFwiKSxcclxuICAgICAgICB0aGlzZGQgPSBwYXJlbnRVbC5zaWJsaW5ncyhcIi5kcm9wZG93bi1zZWxlY3RcIiksXHJcbiAgICAgICAgbGlodG1sID0gdGhhdC5odG1sKCksXHJcbiAgICAgICAgbGl2YWx1ZSA9IHRoYXQuYXR0cihcImRhdGEtdmFsdWVcIiksXHJcbiAgICAgICAgb3JpZ2luYWxTZWxlY3QgPSBcIiNcIiArIHBhcmVudFVsLmF0dHIoXCJkYXRhLXJvbGVcIik7IC8vY2xvc2UgdGhlIGRyb3Bkb3duXHJcblxyXG4gICAgICBwYXJlbnRVbC5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpOyAvL3JlbW92ZSBzZWxlY3RlZCBjbGFzcyBmcm9tIGFsbCBsaXN0IGl0ZW1zXHJcblxyXG4gICAgICB0aGF0LnNpYmxpbmdzKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTsgLy9hZGQgLnNlbGVjdGVkIHRvIGNsaWNrZWQgbGlcclxuXHJcbiAgICAgIHRoYXQuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTsgLy9zZXQgdGhlIHZhbHVlIG9mIHRoZSBoaWRkZW4gaW5wdXRcclxuXHJcbiAgICAgICQob3JpZ2luYWxTZWxlY3QpLnZhbChsaXZhbHVlKTsgLy9jaGFuZ2UgdGhlIGRyb3Bkb3duIHRleHRcclxuXHJcbiAgICAgIHRoaXNkZC5jaGlsZHJlbihcInNwYW5cIikuaHRtbChsaWh0bWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KShqUXVlcnkpO1xyXG5cclxuJChcIi50YWItY29udGVudFwiKS5oaWRlKCk7XHJcbiQoXCIudGFiLWNvbnRlbnQ6Zmlyc3RcIikuc2hvdygpO1xyXG4vKiBpZiBpbiB0YWIgbW9kZSAqL1xyXG5cclxuJChcInVsLnRhYnMgbGksLnByb2R1Y3QtY2FyZF9fcmV2aWV3LWxpbmsgYSwuc2NoZWR1bGUtYnRuIGFcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICQoXCIudGFiLWNvbnRlbnRcIikuaGlkZSgpO1xyXG4gIHZhciBhY3RpdmVUYWIgPSAkKHRoaXMpLmF0dHIoXCJyZWxcIik7XHJcbiAgJChcIiNcIiArIGFjdGl2ZVRhYikuZmFkZUluKCk7XHJcbiAgJChcInVsLnRhYnMgbGlcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgJCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAkKFwiLnRhYl9kcmF3ZXJfaGVhZGluZ1wiKS5yZW1vdmVDbGFzcyhcImRfYWN0aXZlXCIpO1xyXG4gICQoXCIudGFiX2RyYXdlcl9oZWFkaW5nW3JlbF49J1wiICsgYWN0aXZlVGFiICsgXCInXVwiKS5hZGRDbGFzcyhcImRfYWN0aXZlXCIpO1xyXG59KTtcclxuLyogaWYgaW4gZHJhd2VyIG1vZGUgKi9cclxuXHJcbiQoXCIudGFiX2RyYXdlcl9oZWFkaW5nXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICB2YXIgZF9hY3RpdmVUYWIgPSAkKHRoaXMpLmF0dHIoXCJyZWxcIiksXHJcbiAgICBhY3RpdmVUYWJCbG9jayA9ICQoXCIjXCIgKyBkX2FjdGl2ZVRhYiArIFwiOmhpZGRlblwiKSxcclxuICAgICR0aGlzQWN0aXZlID0gJCh0aGlzKS5ub3QoXCIuZF9hY3RpdmVcIik7XHJcbiAgJChcIi50YWItY29udGVudFwiKS5oaWRlKCk7XHJcbiAgYWN0aXZlVGFiQmxvY2suZmFkZUluKCk7XHJcbiAgJChcIi50YWJfZHJhd2VyX2hlYWRpbmdcIikucmVtb3ZlQ2xhc3MoXCJkX2FjdGl2ZVwiKTtcclxuICAkdGhpc0FjdGl2ZS5hZGRDbGFzcyhcImRfYWN0aXZlXCIpO1xyXG4gICQoXCJ1bC50YWJzIGxpXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICQoXCJ1bC50YWJzIGxpW3JlbF49J1wiICsgZF9hY3RpdmVUYWIgKyBcIiddXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG59KTtcclxuLyogRXh0cmEgY2xhc3MgXCJ0YWJfbGFzdFwiXHJcbiB0byBhZGQgYm9yZGVyIHRvIHJpZ2h0IHNpZGVcclxuIG9mIGxhc3QgdGFiICovXHJcblxyXG4kKFwidWwudGFicyBsaVwiKS5sYXN0KCkuYWRkQ2xhc3MoXCJ0YWJfbGFzdFwiKTtcclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgalF1ZXJ5KFwiLnNjaGVkdWxlLWJ0biBhXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIGpRdWVyeShcIi5zY2hlZHVsZS1saW5rXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG59KTtcclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgalF1ZXJ5KFwiLnByb2R1Y3QtY2FyZF9fcmV2aWV3LWxpbmsgYVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICBqUXVlcnkoXCIucmV2aWV3LXRhYi1saW5rXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG59KTsgLy9zbGlkZXNob3dcclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICB2YXIgc3luYzEgPSAkKFwiI3N5bmMxXCIpO1xyXG4gIHZhciBzeW5jMiA9ICQoXCIjc3luYzJcIik7XHJcbiAgdmFyIHNsaWRlc1BlclBhZ2UgPSAzOyAvL2dsb2JhbHkgZGVmaW5lIG51bWJlciBvZiBlbGVtZW50cyBwZXIgcGFnZVxyXG5cclxuICB2YXIgc3luY2VkU2Vjb25kYXJ5ID0gdHJ1ZTtcclxuICBzeW5jMVxyXG4gIC5vd2xDYXJvdXNlbCh7XHJcbiAgICBpdGVtczogMSxcclxuICAgIHNsaWRlU3BlZWQ6IDIwMDAsXHJcbiAgICBuYXY6IHRydWUsXHJcbiAgICBhdXRvcGxheTogZmFsc2UsXHJcbiAgICBkb3RzOiB0cnVlLFxyXG4gICAgbG9vcDogdHJ1ZSxcclxuICAgIHJlc3BvbnNpdmVSZWZyZXNoUmF0ZTogMjAwLFxyXG4gICAgbWFyZ2luOiAxMCxcclxuICB9KVxyXG4gIC5vbihcImNoYW5nZWQub3dsLmNhcm91c2VsXCIsIHN5bmNQb3NpdGlvbik7XHJcbiAgc3luYzJcclxuICAub24oXCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgc3luYzIuZmluZChcIi5vd2wtaXRlbVwiKS5lcSgwKS5hZGRDbGFzcyhcImN1cnJlbnRcIik7XHJcbiAgfSlcclxuICAub3dsQ2Fyb3VzZWwoe1xyXG4gICAgaXRlbXM6IHNsaWRlc1BlclBhZ2UsXHJcbiAgICBkb3RzOiB0cnVlLFxyXG4gICAgbmF2OiB0cnVlLFxyXG4gICAgbWFyZ2luOiAxMCxcclxuICAgIHNtYXJ0U3BlZWQ6IDIwMCxcclxuICAgIHNsaWRlU3BlZWQ6IDUwMCxcclxuICAgIHNsaWRlQnk6IHNsaWRlc1BlclBhZ2UsXHJcbiAgICAvL2FsdGVybmF0aXZlbHkgeW91IGNhbiBzbGlkZSBieSAxLCB0aGlzIHdheSB0aGUgYWN0aXZlIHNsaWRlIHdpbGwgc3RpY2sgdG8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIHNlY29uZCBjYXJvdXNlbFxyXG4gICAgcmVzcG9uc2l2ZVJlZnJlc2hSYXRlOiAxMDAsXHJcbiAgfSlcclxuICAub24oXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiLCBzeW5jUG9zaXRpb24yKTtcclxuXHJcbiAgZnVuY3Rpb24gc3luY1Bvc2l0aW9uKGVsKSB7XHJcbiAgICAvL2lmIHlvdSBzZXQgbG9vcCB0byBmYWxzZSwgeW91IGhhdmUgdG8gcmVzdG9yZSB0aGlzIG5leHQgbGluZVxyXG4gICAgLy92YXIgY3VycmVudCA9IGVsLml0ZW0uaW5kZXg7XHJcbiAgICAvL2lmIHlvdSBkaXNhYmxlIGxvb3AgeW91IGhhdmUgdG8gY29tbWVudCB0aGlzIGJsb2NrXHJcbiAgICB2YXIgY291bnQgPSBlbC5pdGVtLmNvdW50IC0gMTtcclxuICAgIHZhciBjdXJyZW50ID0gTWF0aC5yb3VuZChlbC5pdGVtLmluZGV4IC0gZWwuaXRlbS5jb3VudCAvIDIgLSAwLjUpO1xyXG5cclxuICAgIGlmIChjdXJyZW50IDwgMCkge1xyXG4gICAgICBjdXJyZW50ID0gY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGN1cnJlbnQgPiBjb3VudCkge1xyXG4gICAgICBjdXJyZW50ID0gMDtcclxuICAgIH0gLy9lbmQgYmxvY2tcclxuXHJcbiAgICBzeW5jMi5maW5kKFwiLm93bC1pdGVtXCIpLnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKS5lcShjdXJyZW50KS5hZGRDbGFzcyhcImN1cnJlbnRcIik7XHJcbiAgICB2YXIgb25zY3JlZW4gPSBzeW5jMi5maW5kKFwiLm93bC1pdGVtLmFjdGl2ZVwiKS5sZW5ndGggLSAxO1xyXG4gICAgdmFyIHN0YXJ0ID0gc3luYzIuZmluZChcIi5vd2wtaXRlbS5hY3RpdmVcIikuZmlyc3QoKS5pbmRleCgpO1xyXG4gICAgdmFyIGVuZCA9IHN5bmMyLmZpbmQoXCIub3dsLWl0ZW0uYWN0aXZlXCIpLmxhc3QoKS5pbmRleCgpO1xyXG5cclxuICAgIGlmIChjdXJyZW50ID4gZW5kKSB7XHJcbiAgICAgIHN5bmMyLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIikudG8oY3VycmVudCwgMTAwLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY3VycmVudCA8IHN0YXJ0KSB7XHJcbiAgICAgIHN5bmMyLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIikudG8oY3VycmVudCAtIG9uc2NyZWVuLCAxMDAsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3luY1Bvc2l0aW9uMihlbCkge1xyXG4gICAgaWYgKHN5bmNlZFNlY29uZGFyeSkge1xyXG4gICAgICB2YXIgbnVtYmVyID0gZWwuaXRlbS5pbmRleDtcclxuICAgICAgc3luYzEuZGF0YShcIm93bC5jYXJvdXNlbFwiKS50byhudW1iZXIsIDEwMCwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzeW5jMi5vbihcImNsaWNrXCIsIFwiLm93bC1pdGVtXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB2YXIgbnVtYmVyID0gJCh0aGlzKS5pbmRleCgpO1xyXG4gICAgc3luYzEuZGF0YShcIm93bC5jYXJvdXNlbFwiKS50byhudW1iZXIsIDMwMCwgdHJ1ZSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuKCgpID0+IHtcclxuICBjb25zdCBidXR0b25EZWZhdWx0VmlldyA9ICQoXCIuYnV0dG9uMVwiKTtcclxuICBjb25zdCBidXR0b25XaWRlVmlldyA9ICQoXCIuYnV0dG9uMlwiKTtcclxuICBjb25zdCBidXR0b25MaW5lVmlldyA9ICQoXCIuYnV0dG9uM1wiKTtcclxuICBjb25zdCBpdGVtcyA9ICQoXCIucHJvZHVjdC1pdGVtXCIpO1xyXG5cclxuICBidXR0b25XaWRlVmlldy5jbGljaygoZXZlbnQpID0+IHtcclxuICAgIGJ1dHRvbkRlZmF1bHRWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgIGJ1dHRvbkxpbmVWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXRhbG9nR3JpZFwiLCBcIndpZGVcIik7XHJcbiAgICBpdGVtcy5yZW1vdmVDbGFzcyhcInByb2R1Y3QtaXRlbS0tbGluZVwiKTtcclxuICAgIGl0ZW1zLmFkZENsYXNzKFwicHJvZHVjdC1pdGVtLS13aWRlXCIpO1xyXG4gIH0pO1xyXG5cclxuICBidXR0b25MaW5lVmlldy5jbGljaygoZXZlbnQpID0+IHtcclxuICAgIGJ1dHRvbldpZGVWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgIGJ1dHRvbkRlZmF1bHRWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXRhbG9nR3JpZFwiLCBcIndpZGVcIik7XHJcbiAgICBpdGVtcy5yZW1vdmVDbGFzcyhcInByb2R1Y3QtaXRlbS0td2lkZVwiKTtcclxuICAgIGl0ZW1zLmFkZENsYXNzKFwicHJvZHVjdC1pdGVtLS1saW5lXCIpO1xyXG4gIH0pO1xyXG5cclxuICBidXR0b25EZWZhdWx0Vmlldy5jbGljaygoZXZlbnQpID0+IHtcclxuICAgIGJ1dHRvbldpZGVWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgIGJ1dHRvbkxpbmVWaWV3LnJlbW92ZUNsYXNzKFwiY3VycmVudFwiKTtcclxuICAgICQoZXZlbnQuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYXRhbG9nR3JpZFwiLCBcImRlZmF1bHRcIik7XHJcbiAgICBpdGVtcy5yZW1vdmVDbGFzcyhcInByb2R1Y3QtaXRlbS0td2lkZVwiKTtcclxuICAgIGl0ZW1zLnJlbW92ZUNsYXNzKFwicHJvZHVjdC1pdGVtLS1saW5lXCIpO1xyXG4gIH0pO1xyXG59KSgpO1xyXG5cclxudmFyIGtleXByZXNzU2xpZGVycyA9ICQoXCIucmFuZ2Utc2xpZGVyXCIpO1xyXG4kKGtleXByZXNzU2xpZGVycykuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGtleXByZXNzU2xpZGVyKSB7XHJcbiAgdmFyIGZpZWxkX25hbWUgPSAkKGtleXByZXNzU2xpZGVyKS5kYXRhKFwibmFtZVwiKTtcclxuICB2YXIgaW5wdXQwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpZF9cIiArIGZpZWxkX25hbWUgKyBcIl8wXCIpO1xyXG4gIHZhciBpbnB1dDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlkX1wiICsgZmllbGRfbmFtZSArIFwiXzFcIik7XHJcbiAgdmFyIGlucHV0cyA9IFtpbnB1dDAsIGlucHV0MV07XHJcblxyXG4gIGlmIChpbnB1dDAgJiYgaW5wdXQxKSB7XHJcbiAgICB2YXIgc3RhcnRWYWwgPSBwYXJzZUludChpbnB1dDAuZGF0YXNldC5jdXJyZW50VmFsdWUpLFxyXG4gICAgICBlbmRWYWwgPSBwYXJzZUludChpbnB1dDEuZGF0YXNldC5jdXJyZW50VmFsdWUpO1xyXG4gICAgdmFyIG1pblZhbCA9IHBhcnNlSW50KGlucHV0MC5kYXRhc2V0Lm1pblZhbHVlKSxcclxuICAgICAgbWF4VmFsID0gcGFyc2VJbnQoaW5wdXQxLmRhdGFzZXQubWF4VmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBvc3RmaXggPSBcIlwiO1xyXG5cclxuICBpZiAoZmllbGRfbmFtZSA9PSBcInByaWNlX3JhbmdlXCIpIHtcclxuICAgIHBvc3RmaXggPSBcIiDigr1cIjtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2Ygbm9VaVNsaWRlciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgbm9VaVNsaWRlci5jcmVhdGUoa2V5cHJlc3NTbGlkZXIsIHtcclxuICAgICAgc3RhcnQ6IFtzdGFydFZhbCwgZW5kVmFsXSxcclxuICAgICAgY29ubmVjdDogdHJ1ZSxcclxuICAgICAgcmFuZ2U6IHtcclxuICAgICAgICBtaW46IG1pblZhbCxcclxuICAgICAgICBtYXg6IG1heFZhbCxcclxuICAgICAgfSxcclxuICAgICAgZm9ybWF0OiB3TnVtYih7XHJcbiAgICAgICAgZGVjaW1hbHM6IDAsXHJcbiAgICAgICAgdGhvdXNhbmQ6IFwiIFwiLFxyXG4gICAgICAgIHBvc3RmaXg6IHBvc3RmaXgsXHJcbiAgICAgIH0pLFxyXG4gICAgICBzdGVwOiAxLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpZiAoa2V5cHJlc3NTbGlkZXIgIT09IG51bGwgJiYga2V5cHJlc3NTbGlkZXIubm9VaVNsaWRlcikge1xyXG4gICAga2V5cHJlc3NTbGlkZXIubm9VaVNsaWRlci5vbihcInVwZGF0ZVwiLCBmdW5jdGlvbiAodmFsdWVzLCBoYW5kbGUpIHtcclxuICAgICAgaW5wdXRzW2hhbmRsZV0udmFsdWUgPSB2YWx1ZXNbaGFuZGxlXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0U2xpZGVySGFuZGxlKGksIHZhbHVlKSB7XHJcbiAgICB2YXIgciA9IFtudWxsLCBudWxsXTtcclxuICAgIHJbaV0gPSB2YWx1ZTtcclxuICAgIGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc2V0KHIpO1xyXG4gIH0gLy8gTGlzdGVuIHRvIGtleWRvd24gZXZlbnRzIG9uIHRoZSBpbnB1dCBmaWVsZC5cclxuXHJcbiAgaW5wdXRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCBoYW5kbGUpIHtcclxuICAgIGlmIChpbnB1dCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHNldFNsaWRlckhhbmRsZShoYW5kbGUsIHRoaXMudmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICB2YXIgdmFsdWVzID0ga2V5cHJlc3NTbGlkZXIubm9VaVNsaWRlci5nZXQoKTtcclxuICAgICAgdmFyIHZhbHVlID0gTnVtYmVyKHZhbHVlc1toYW5kbGVdKTsgLy8gW1toYW5kbGUwX2Rvd24sIGhhbmRsZTBfdXBdLCBbaGFuZGxlMV9kb3duLCBoYW5kbGUxX3VwXV1cclxuXHJcbiAgICAgIHZhciBzdGVwcyA9IGtleXByZXNzU2xpZGVyLm5vVWlTbGlkZXIuc3RlcHMoKTsgLy8gW2Rvd24sIHVwXVxyXG5cclxuICAgICAgdmFyIHN0ZXAgPSBzdGVwc1toYW5kbGVdO1xyXG4gICAgICB2YXIgcG9zaXRpb247IC8vIDEzIGlzIGVudGVyLFxyXG4gICAgICAvLyAzOCBpcyBrZXkgdXAsXHJcbiAgICAgIC8vIDQwIGlzIGtleSBkb3duLlxyXG5cclxuICAgICAgc3dpdGNoIChlLndoaWNoKSB7XHJcbiAgICAgICAgY2FzZSAxMzpcclxuICAgICAgICAgIHNldFNsaWRlckhhbmRsZShoYW5kbGUsIHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgMzg6XHJcbiAgICAgICAgICAvLyBHZXQgc3RlcCB0byBnbyBpbmNyZWFzZSBzbGlkZXIgdmFsdWUgKHVwKVxyXG4gICAgICAgICAgcG9zaXRpb24gPSBzdGVwWzFdOyAvLyBmYWxzZSA9IG5vIHN0ZXAgaXMgc2V0XHJcblxyXG4gICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9IDE7XHJcbiAgICAgICAgICB9IC8vIG51bGwgPSBlZGdlIG9mIHNsaWRlclxyXG5cclxuICAgICAgICAgIGlmIChwb3NpdGlvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRTbGlkZXJIYW5kbGUoaGFuZGxlLCB2YWx1ZSArIHBvc2l0aW9uKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSA0MDpcclxuICAgICAgICAgIHBvc2l0aW9uID0gc3RlcFswXTtcclxuXHJcbiAgICAgICAgICBpZiAocG9zaXRpb24gPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gMTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAocG9zaXRpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0U2xpZGVySGFuZGxlKGhhbmRsZSwgdmFsdWUgLSBwb3NpdGlvbik7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGdhbGxlcnkoKSB7XHJcbiAgaWYgKCQuZmFuY3lib3gpIHtcclxuICAgICQoXCIub3dsLWl0ZW0gW2RhdGEtZmFuY3lib3hdXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHNlbGVjdG9yID0gJCh0aGlzKVxyXG4gICAgICAucGFyZW50cyhcIi5vd2wtY2Fyb3VzZWxcIilcclxuICAgICAgLmZpbmQoXCIub3dsLWl0ZW06bm90KC5jbG9uZWQpIFtkYXRhLWZhbmN5Ym94XVwiKTtcclxuICAgICAgJC5mYW5jeWJveC5vcGVuKFxyXG4gICAgICAgICRzZWxlY3RvcixcclxuICAgICAgICB7XHJcbiAgICAgICAgICBzZWxlY3RvcjogJHNlbGVjdG9yLFxyXG4gICAgICAgICAgYmFja0ZvY3VzOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgICRzZWxlY3Rvci5pbmRleCh0aGlzKVxyXG4gICAgICApO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhlYWRlcigpIHtcclxuICB2YXIgJGhlYWRlciA9ICQoXCJoZWFkZXJcIiksXHJcbiAgICBoZWlnaHQsXHJcbiAgICBzY3JvbGw7XHJcbiAgbGV0IGlzVGhyb3R0bGVkID0gZmFsc2U7XHJcbiAgY2hlY2soKTtcclxuICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChpc1Rocm90dGxlZCkgcmV0dXJuO1xyXG4gICAgaXNUaHJvdHRsZWQgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGNoZWNrKCk7XHJcbiAgICAgIGlzVGhyb3R0bGVkID0gZmFsc2U7XHJcbiAgICB9LCAxMDApO1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjaGVjaygpIHtcclxuICAgIGlmICghJGhlYWRlci5oYXNDbGFzcyhcImhlYWRlcl9sYW5kaW5nXCIpKSB7XHJcbiAgICAgIHNjcm9sbCA9ICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuICAgICAgaGVpZ2h0ID0gJGhlYWRlci5oZWlnaHQoKTtcclxuXHJcbiAgICAgIGlmIChzY3JvbGwgPiBoZWlnaHQpIHtcclxuICAgICAgICAkaGVhZGVyLmFkZENsYXNzKFwiZml4ZWRcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJGhlYWRlci5yZW1vdmVDbGFzcyhcImZpeGVkXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59IC8vZ2FsbGVyeVxyXG5cclxuZnVuY3Rpb24gaG9tZUJhbm5lcigpIHtcclxuICB2YXIgJHNsaWRlciA9ICQoXCIuaG9tZS1iYW5uZXIgLm93bC1jYXJvdXNlbFwiKSxcclxuICAgIGFycm93UHJldiA9XHJcbiAgICAgICc8c3ZnIGNsYXNzPVwiaWNvblwiIHZpZXdCb3g9XCIwIDAgMTAuNSAxOC4xXCI+PHBhdGggc3Ryb2tlPVwibm9uZVwiIGQ9XCJNOSwwbDEuNCwxLjRMMi44LDlsNy42LDcuNkw5LDE4LjFMMCw5QzAsOSw5LjEsMCw5LDB6XCI+PC9wYXRoPjwvc3ZnPicsXHJcbiAgICBhcnJvd05leHQgPVxyXG4gICAgICAnPHN2ZyBjbGFzcz1cImljb25cIiB2aWV3Qm94PVwiMCAwIDEwLjUgMTguMVwiPjxwYXRoIHN0cm9rZT1cIm5vbmVcIiBkPVwiTTEuNCwxOC4xTDAsMTYuN2w3LjYtNy42TDAsMS41TDEuNCwwbDksOS4xQzEwLjQsOS4xLDEuMywxOC4xLDEuNCwxOC4xelwiPjwvcGF0aD48L3N2Zz4nO1xyXG5cclxuICBpZiAoJHNsaWRlci5sZW5ndGgpIHtcclxuICAgICRzbGlkZXIub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICBsb29wOiB0cnVlLFxyXG4gICAgICBuYXY6IHRydWUsXHJcbiAgICAgIHNtYXJ0U3BlZWQ6IDUwMCxcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgaXRlbXM6IDEsXHJcbiAgICAgIGxhenlMb2FkOiB0cnVlLFxyXG4gICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgYXV0b3BsYXlUaW1lb3V0OiAoKyRzbGlkZXIuZGF0YShcImF1dG9wbGF5LXRpbWVvdXRcIikgfHwgNSkgKiAxMDAwLFxyXG4gICAgICBuYXZUZXh0OiBbYXJyb3dQcmV2LCBhcnJvd05leHRdLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuKGZ1bmN0aW9uICgkKSB7XHJcbiAgdmFyIHBsdWdpbk5hbWUgPSBcImNzY3JsYlwiO1xyXG5cclxuICBmdW5jdGlvbiBQbHVnaW4oZWxlbWVudCwgb3B0aW9ucykge1xyXG4gICAgdmFyIGVsID0gZWxlbWVudDtcclxuICAgIHZhciAkZWwgPSAkKGVsZW1lbnQpO1xyXG4gICAgdmFyICRzY3JvbGxDb250ZW50RWw7XHJcbiAgICB2YXIgJGNvbnRlbnRFbCA9ICRlbC5maW5kKFwiLmNzY3JsYi1jb250ZW50XCIpO1xyXG4gICAgdmFyICRzY3JvbGxiYXJFbDtcclxuICAgIHZhciAkZHJhZ0hhbmRsZUVsO1xyXG4gICAgdmFyIGRyYWdPZmZzZXQ7XHJcbiAgICB2YXIgZmxhc2hUaW1lb3V0O1xyXG4gICAgdmFyIHBhZ2VKdW1wTXVsdHAgPSA3IC8gODtcclxuICAgIHZhciBzY3JvbGxEaXJlY3Rpb24gPSBcInZlcnRcIjtcclxuICAgIHZhciBzY3JvbGxPZmZzZXRBdHRyID0gXCJzY3JvbGxUb3BcIjtcclxuICAgIHZhciBzaXplQXR0ciA9IFwiaGVpZ2h0XCI7XHJcbiAgICB2YXIgb2Zmc2V0QXR0ciA9IFwidG9wXCI7XHJcbiAgICBvcHRpb25zID0gJC5leHRlbmQoe30sICQuZm5bcGx1Z2luTmFtZV0uZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICRjb250ZW50RWwuZm9jdXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgaWYgKCRlbC5oYXNDbGFzcyhcImhvcml6b250YWxcIikpIHtcclxuICAgICAgICBzY3JvbGxEaXJlY3Rpb24gPSBcImhvcml6XCI7XHJcbiAgICAgICAgc2Nyb2xsT2Zmc2V0QXR0ciA9IFwic2Nyb2xsTGVmdFwiO1xyXG4gICAgICAgIHNpemVBdHRyID0gXCJ3aWR0aFwiO1xyXG4gICAgICAgIG9mZnNldEF0dHIgPSBcImxlZnRcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGVsLnByZXBlbmQoJzxkaXYgY2xhc3M9XCJjc2NybGItc2Nyb2xsYmFyXCI+PGRpdiBjbGFzcz1cImRyYWctaGFuZGxlXCI+PC9kaXY+PC9kaXY+Jyk7XHJcbiAgICAgICRzY3JvbGxiYXJFbCA9ICRlbC5maW5kKFwiLmNzY3JsYi1zY3JvbGxiYXJcIik7XHJcbiAgICAgICRkcmFnSGFuZGxlRWwgPSAkZWwuZmluZChcIi5kcmFnLWhhbmRsZVwiKTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLndyYXBDb250ZW50KSB7XHJcbiAgICAgICAgJGNvbnRlbnRFbC53cmFwKCc8ZGl2IGNsYXNzPVwiY3NjcmxiLXNjcm9sbC1jb250ZW50XCIgLz4nKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJHNjcm9sbENvbnRlbnRFbCA9ICRlbC5maW5kKFwiLmNzY3JsYi1zY3JvbGwtY29udGVudFwiKTtcclxuICAgICAgcmVzaXplU2Nyb2xsQ29udGVudCgpO1xyXG5cclxuICAgICAgaWYgKG9wdGlvbnMuYXV0b0hpZGUpIHtcclxuICAgICAgICAkZWwub24oXCJtb3VzZWVudGVyXCIsIGZsYXNoU2Nyb2xsYmFyKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGRyYWdIYW5kbGVFbC5vbihcIm1vdXNlZG93blwiLCBzdGFydERyYWcpO1xyXG4gICAgICAkc2Nyb2xsYmFyRWwub24oXCJtb3VzZWRvd25cIiwganVtcFNjcm9sbCk7XHJcbiAgICAgICRzY3JvbGxDb250ZW50RWwub24oXCJzY3JvbGxcIiwgb25TY3JvbGxlZCk7XHJcbiAgICAgIHJlc2l6ZVNjcm9sbGJhcigpO1xyXG4gICAgICAkKHdpbmRvdykub24oXCJyZXNpemVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJlY2FsY3VsYXRlKCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKCFvcHRpb25zLmF1dG9IaWRlKSB7XHJcbiAgICAgICAgc2hvd1Njcm9sbGJhcigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhcnREcmFnKGUpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB2YXIgZXZlbnRPZmZzZXQgPSBlLnBhZ2VZO1xyXG5cclxuICAgICAgaWYgKHNjcm9sbERpcmVjdGlvbiA9PT0gXCJob3JpelwiKSB7XHJcbiAgICAgICAgZXZlbnRPZmZzZXQgPSBlLnBhZ2VYO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkcmFnT2Zmc2V0ID0gZXZlbnRPZmZzZXQgLSAkZHJhZ0hhbmRsZUVsLm9mZnNldCgpW29mZnNldEF0dHJdO1xyXG4gICAgICAkKGRvY3VtZW50KS5vbihcIm1vdXNlbW92ZVwiLCBkcmFnKTtcclxuICAgICAgJChkb2N1bWVudCkub24oXCJtb3VzZXVwXCIsIGVuZERyYWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRyYWcoZSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHZhciBldmVudE9mZnNldCA9IGUucGFnZVk7XHJcblxyXG4gICAgICBpZiAoc2Nyb2xsRGlyZWN0aW9uID09PSBcImhvcml6XCIpIHtcclxuICAgICAgICBldmVudE9mZnNldCA9IGUucGFnZVg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkcmFnUG9zID0gZXZlbnRPZmZzZXQgLSAkc2Nyb2xsYmFyRWwub2Zmc2V0KClbb2Zmc2V0QXR0cl0gLSBkcmFnT2Zmc2V0O1xyXG4gICAgICB2YXIgZHJhZ1BlcmMgPSBkcmFnUG9zIC8gJHNjcm9sbGJhckVsW3NpemVBdHRyXSgpO1xyXG4gICAgICB2YXIgc2Nyb2xsUG9zID0gZHJhZ1BlcmMgKiAkY29udGVudEVsW3NpemVBdHRyXSgpO1xyXG4gICAgICAkc2Nyb2xsQ29udGVudEVsW3Njcm9sbE9mZnNldEF0dHJdKHNjcm9sbFBvcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZW5kRHJhZygpIHtcclxuICAgICAgJChkb2N1bWVudCkub2ZmKFwibW91c2Vtb3ZlXCIsIGRyYWcpO1xyXG4gICAgICAkKGRvY3VtZW50KS5vZmYoXCJtb3VzZXVwXCIsIGVuZERyYWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGp1bXBTY3JvbGwoZSkge1xyXG4gICAgICBpZiAoZS50YXJnZXQgPT09ICRkcmFnSGFuZGxlRWxbMF0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBqdW1wQW10ID0gcGFnZUp1bXBNdWx0cCAqICRzY3JvbGxDb250ZW50RWxbc2l6ZUF0dHJdKCk7XHJcbiAgICAgIHZhciBldmVudE9mZnNldCA9XHJcbiAgICAgICAgc2Nyb2xsRGlyZWN0aW9uID09PSBcInZlcnRcIiA/IGUub3JpZ2luYWxFdmVudC5sYXllclkgOiBlLm9yaWdpbmFsRXZlbnQubGF5ZXJYO1xyXG4gICAgICB2YXIgZHJhZ0hhbmRsZU9mZnNldCA9ICRkcmFnSGFuZGxlRWwucG9zaXRpb24oKVtvZmZzZXRBdHRyXTtcclxuICAgICAgdmFyIHNjcm9sbFBvcyA9XHJcbiAgICAgICAgZXZlbnRPZmZzZXQgPCBkcmFnSGFuZGxlT2Zmc2V0XHJcbiAgICAgICAgICA/ICRzY3JvbGxDb250ZW50RWxbc2Nyb2xsT2Zmc2V0QXR0cl0oKSAtIGp1bXBBbXRcclxuICAgICAgICAgIDogJHNjcm9sbENvbnRlbnRFbFtzY3JvbGxPZmZzZXRBdHRyXSgpICsganVtcEFtdDtcclxuICAgICAgJHNjcm9sbENvbnRlbnRFbFtzY3JvbGxPZmZzZXRBdHRyXShzY3JvbGxQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG9uU2Nyb2xsZWQoZSkge1xyXG4gICAgICBmbGFzaFNjcm9sbGJhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2l6ZVNjcm9sbGJhcigpIHtcclxuICAgICAgdmFyIGNvbnRlbnRTaXplID0gJGNvbnRlbnRFbFtzaXplQXR0cl0oKTtcclxuICAgICAgdmFyIHNjcm9sbE9mZnNldCA9ICRzY3JvbGxDb250ZW50RWxbc2Nyb2xsT2Zmc2V0QXR0cl0oKTsgLy8gc2Nyb2xsVG9wKCkg44GLIHNjcm9sbExlZnQoKVxyXG5cclxuICAgICAgdmFyIHNjcm9sbGJhclNpemUgPSAkc2Nyb2xsYmFyRWxbc2l6ZUF0dHJdKCk7XHJcbiAgICAgIHZhciBzY3JvbGxiYXJSYXRpbyA9IHNjcm9sbGJhclNpemUgLyBjb250ZW50U2l6ZTtcclxuICAgICAgdmFyIGhhbmRsZU9mZnNldCA9IE1hdGgucm91bmQoc2Nyb2xsYmFyUmF0aW8gKiBzY3JvbGxPZmZzZXQpO1xyXG4gICAgICAvKiArIDI7ICovXHJcblxyXG4gICAgICB2YXIgaGFuZGxlU2l6ZSA9IE1hdGguZmxvb3Ioc2Nyb2xsYmFyUmF0aW8gKiAoc2Nyb2xsYmFyU2l6ZSArIDIpKTtcclxuICAgICAgLyogIC0gMikpIC0gMjsgKi9cclxuXHJcbiAgICAgIGlmIChzY3JvbGxiYXJTaXplIDwgY29udGVudFNpemUpIHtcclxuICAgICAgICBpZiAoc2Nyb2xsRGlyZWN0aW9uID09PSBcInZlcnRcIikge1xyXG4gICAgICAgICAgJGRyYWdIYW5kbGVFbC5jc3Moe1xyXG4gICAgICAgICAgICB0b3A6IGhhbmRsZU9mZnNldCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoYW5kbGVTaXplLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICRkcmFnSGFuZGxlRWwuY3NzKHtcclxuICAgICAgICAgICAgbGVmdDogaGFuZGxlT2Zmc2V0LFxyXG4gICAgICAgICAgICB3aWR0aDogaGFuZGxlU2l6ZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJHNjcm9sbGJhckVsLnNob3coKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2Nyb2xsYmFyRWwuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZmxhc2hTY3JvbGxiYXIoKSB7XHJcbiAgICAgIHJlc2l6ZVNjcm9sbGJhcigpO1xyXG4gICAgICBzaG93U2Nyb2xsYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvd1Njcm9sbGJhcigpIHtcclxuICAgICAgJGRyYWdIYW5kbGVFbC5hZGRDbGFzcyhcInZpc2libGVcIik7XHJcblxyXG4gICAgICBpZiAoIW9wdGlvbnMuYXV0b0hpZGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YgZmxhc2hUaW1lb3V0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChmbGFzaFRpbWVvdXQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmbGFzaFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaGlkZVNjcm9sbGJhcigpO1xyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBoaWRlU2Nyb2xsYmFyKCkge1xyXG4gICAgICAkZHJhZ0hhbmRsZUVsLnJlbW92ZUNsYXNzKFwidmlzaWJsZVwiKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgZmxhc2hUaW1lb3V0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChmbGFzaFRpbWVvdXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzaXplU2Nyb2xsQ29udGVudCgpIHtcclxuICAgICAgaWYgKHNjcm9sbERpcmVjdGlvbiA9PT0gXCJ2ZXJ0XCIpIHtcclxuICAgICAgICAkc2Nyb2xsQ29udGVudEVsLndpZHRoKCRlbC53aWR0aCgpICsgc2Nyb2xsYmFyV2lkdGgoKSk7XHJcbiAgICAgICAgJHNjcm9sbENvbnRlbnRFbC5oZWlnaHQoJGVsLmhlaWdodCgpKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkc2Nyb2xsQ29udGVudEVsLndpZHRoKCRlbC53aWR0aCgpKTtcclxuICAgICAgICAkc2Nyb2xsQ29udGVudEVsLmhlaWdodCgkZWwuaGVpZ2h0KCkgKyBzY3JvbGxiYXJXaWR0aCgpKTtcclxuICAgICAgICAkY29udGVudEVsLmhlaWdodCgkZWwuaGVpZ2h0KCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2Nyb2xsYmFyV2lkdGgoKSB7XHJcbiAgICAgIHZhciB0ZW1wRWwgPSAkKFxyXG4gICAgICAgICc8ZGl2IGNsYXNzPVwic2Nyb2xsYmFyLXdpZHRoLXRlc3RlclwiIHN0eWxlPVwid2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdy15OnNjcm9sbDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTIwMHB4O2xlZnQ6LTIwMHB4O1wiPjxkaXYgc3R5bGU9XCJoZWlnaHQ6MTAwcHg7XCI+PC9kaXY+J1xyXG4gICAgICApO1xyXG4gICAgICAkKFwiYm9keVwiKS5hcHBlbmQodGVtcEVsKTtcclxuICAgICAgdmFyIHdpZHRoID0gJCh0ZW1wRWwpLmlubmVyV2lkdGgoKTtcclxuICAgICAgdmFyIHdpZHRoTWludXNTY3JvbGxiYXJzID0gJChcImRpdlwiLCB0ZW1wRWwpLmlubmVyV2lkdGgoKTtcclxuICAgICAgdGVtcEVsLnJlbW92ZSgpO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHdpZHRoID09PSB3aWR0aE1pbnVzU2Nyb2xsYmFycyAmJlxyXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiZmlyZWZveFwiKSA+IC0xXHJcbiAgICAgICkge1xyXG4gICAgICAgIHJldHVybiAxNztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHdpZHRoIC0gd2lkdGhNaW51c1Njcm9sbGJhcnM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjYWxjdWxhdGUoKSB7XHJcbiAgICAgIHJlc2l6ZVNjcm9sbENvbnRlbnQoKTtcclxuICAgICAgcmVzaXplU2Nyb2xsYmFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb3B0aW9uKGtleSwgdmFsKSB7XHJcbiAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICBvcHRpb25zW2tleV0gPSB2YWw7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnNba2V5XTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XHJcbiAgICAgICRjb250ZW50RWwuaW5zZXJ0QmVmb3JlKCRzY3JvbGxiYXJFbCk7XHJcbiAgICAgICRzY3JvbGxiYXJFbC5yZW1vdmUoKTtcclxuICAgICAgJHNjcm9sbENvbnRlbnRFbC5yZW1vdmUoKTtcclxuICAgICAgJGNvbnRlbnRFbC5jc3Moe1xyXG4gICAgICAgIGhlaWdodDogJGVsLmhlaWdodCgpICsgXCJweFwiLFxyXG4gICAgICAgIFwib3ZlcmZsb3cteVwiOiBcInNjcm9sbFwiLFxyXG4gICAgICB9KTtcclxuICAgICAgaG9vayhcIm9uRGVzdHJveVwiKTtcclxuICAgICAgJGVsLnJlbW92ZURhdGEoXCJwbHVnaW5fXCIgKyBwbHVnaW5OYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBob29rKGhvb2tOYW1lKSB7XHJcbiAgICAgIGlmIChvcHRpb25zW2hvb2tOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgb3B0aW9uc1tob29rTmFtZV0uY2FsbChlbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0KCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBvcHRpb246IG9wdGlvbixcclxuICAgICAgZGVzdHJveTogZGVzdHJveSxcclxuICAgICAgcmVjYWxjdWxhdGU6IHJlY2FsY3VsYXRlLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgdmFyIG1ldGhvZE5hbWUgPSBhcmd1bWVudHNbMF07XHJcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgICAgdmFyIHJldHVyblZhbDtcclxuICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAkLmRhdGEodGhpcywgXCJwbHVnaW5fXCIgKyBwbHVnaW5OYW1lKSAmJlxyXG4gICAgICAgICAgdHlwZW9mICQuZGF0YSh0aGlzLCBcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUpW21ldGhvZE5hbWVdID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHJldHVyblZhbCA9ICQuZGF0YSh0aGlzLCBcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUpW21ldGhvZE5hbWVdLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIgXCIgKyBtZXRob2ROYW1lICsgXCIgXCIgKyBwbHVnaW5OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHJldHVyblZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKG9wdGlvbnMpID09PSBcIm9iamVjdFwiIHx8ICFvcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghJC5kYXRhKHRoaXMsIFwicGx1Z2luX1wiICsgcGx1Z2luTmFtZSkpIHtcclxuICAgICAgICAgICQuZGF0YSh0aGlzLCBcInBsdWdpbl9cIiArIHBsdWdpbk5hbWUsIG5ldyBQbHVnaW4odGhpcywgb3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJC5mbltwbHVnaW5OYW1lXS5kZWZhdWx0cyA9IHtcclxuICAgIG9uSW5pdDogZnVuY3Rpb24gb25Jbml0KCkge30sXHJcbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHt9LFxyXG4gICAgd3JhcENvbnRlbnQ6IHRydWUsXHJcbiAgICBhdXRvSGlkZTogZmFsc2UsXHJcbiAgfTtcclxufSkoalF1ZXJ5KTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICQoXCIuY3NjcmxiLXNjcm9sbGFibGVcIikuY3NjcmxiKCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XHJcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XHJcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XHJcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xyXG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xyXG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcclxuICByZXR1cm4gQ29uc3RydWN0b3I7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7XHJcbiAgdmFyIGl0O1xyXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIEFycmF5LmlzQXJyYXkobykgfHxcclxuICAgICAgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fFxyXG4gICAgICAoYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpXHJcbiAgICApIHtcclxuICAgICAgaWYgKGl0KSBvID0gaXQ7XHJcbiAgICAgIHZhciBpID0gMDtcclxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgczogRixcclxuICAgICAgICBuOiBmdW5jdGlvbiBuKCkge1xyXG4gICAgICAgICAgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTtcclxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlOiBmdW5jdGlvbiBlKF9lKSB7XHJcbiAgICAgICAgICB0aHJvdyBfZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGY6IEYsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxyXG4gICAgICBcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCJcclxuICAgICk7XHJcbiAgfVxyXG4gIHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSxcclxuICAgIGRpZEVyciA9IGZhbHNlLFxyXG4gICAgZXJyO1xyXG4gIHJldHVybiB7XHJcbiAgICBzOiBmdW5jdGlvbiBzKCkge1xyXG4gICAgICBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG4gICAgfSxcclxuICAgIG46IGZ1bmN0aW9uIG4oKSB7XHJcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xyXG4gICAgICBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lO1xyXG4gICAgICByZXR1cm4gc3RlcDtcclxuICAgIH0sXHJcbiAgICBlOiBmdW5jdGlvbiBlKF9lMikge1xyXG4gICAgICBkaWRFcnIgPSB0cnVlO1xyXG4gICAgICBlcnIgPSBfZTI7XHJcbiAgICB9LFxyXG4gICAgZjogZnVuY3Rpb24gZigpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXQucmV0dXJuICE9IG51bGwpIGl0LnJldHVybigpO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XHJcbiAgaWYgKCFvKSByZXR1cm47XHJcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcclxuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XHJcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcclxuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcclxuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlcclxuICAgIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xyXG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xyXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xyXG4gICAgYXJyMltpXSA9IGFycltpXTtcclxuICB9XHJcbiAgcmV0dXJuIGFycjI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcclxuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcclxuICB9XHJcbn1cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICBob21lQmFubmVyKCk7XHJcbiAgaGVhZGVyKCk7XHJcbiAgZ2FsbGVyeSgpO1xyXG4gIGxhbmRpbmdfc2xpZGVycygpO1xyXG4gIHVwKCk7XHJcbiAgY2hhdEJsb2NrKCk7XHJcbiAgdG9nZ2xlKCk7IC8vaW50ZXJhY3Rpb25cclxuXHJcbiAgbmV3INChdXN0b21JbnRlcmFjdGlvbih7XHJcbiAgICB0YXJnZXRzOiBcImEsIGJ1dHRvbiwgW2RhdGEtY3VzdG9tLWludGVyYWN0aW9uXSwgLmltYWdlLXpvb21cIixcclxuICB9KTsgLy9zbGlkZXIgY29uc3RydWN0b3JcclxuXHJcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zbGlkZXItY29uc3RydWN0b3JcIikuZm9yRWFjaChmdW5jdGlvbiAoJHRoaXMpIHtcclxuICAgIG5ldyBTbGlkZXJDb25zdHJ1Y3RvcigkdGhpcykuaW5pdCgpO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGxhbmRpbmdfc2xpZGVycygpIHtcclxuICB2YXIgJHNsaWRlcnMgPSAkKFwiLmxhbmRpbmctc2xpZGVyIC5vd2wtY2Fyb3VzZWxcIik7XHJcblxyXG4gIGlmICgkc2xpZGVycy5sZW5ndGgpIHtcclxuICAgICRzbGlkZXJzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xyXG4gICAgICB2YXIgY291bnQxLCBjb3VudDIsIGNvdW50MywgY291bnQ0O1xyXG5cclxuICAgICAgaWYgKCR0aGlzLmlzKFwiLmxhbmRpbmctc2xpZGVyXzEgLm93bC1jYXJvdXNlbFwiKSkge1xyXG4gICAgICAgIGNvdW50MSA9IDI7XHJcbiAgICAgICAgY291bnQyID0gMjtcclxuICAgICAgICBjb3VudDMgPSAzO1xyXG4gICAgICAgIGNvdW50NCA9IDQ7XHJcbiAgICAgIH0gZWxzZSBpZiAoJHRoaXMuaXMoXCIubGFuZGluZy1zbGlkZXJfMiAub3dsLWNhcm91c2VsXCIpKSB7XHJcbiAgICAgICAgY291bnQxID0gMTtcclxuICAgICAgICBjb3VudDIgPSAyO1xyXG4gICAgICAgIGNvdW50MyA9IDM7XHJcbiAgICAgICAgY291bnQ0ID0gNDtcclxuICAgICAgfVxyXG5cclxuICAgICAgJHRoaXMub3dsQ2Fyb3VzZWwoe1xyXG4gICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgbWFyZ2luOiAyMCxcclxuICAgICAgICByZXNwb25zaXZlOiB7XHJcbiAgICAgICAgICAwOiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBjb3VudDEsXHJcbiAgICAgICAgICAgIG1hcmdpbjogMTYsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgNTc2OiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBjb3VudDIsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgNzY4OiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBjb3VudDMsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgOTkyOiB7XHJcbiAgICAgICAgICAgIGl0ZW1zOiBjb3VudDQsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB0b2dnbGUoKSB7XHJcbiAgdmFyICRzZWN0aW9uID0gJChcIi50b2dnbGUtc2VjdGlvblwiKSxcclxuICAgIHNwZWVkID0gMjUwO1xyXG4gICRzZWN0aW9uLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyICR0aGlzID0gJCh0aGlzKSxcclxuICAgICAgJHRvZ2dsZSA9ICR0aGlzLmNoaWxkcmVuKFwiLnRvZ2dsZS1zZWN0aW9uX190cmlnZ2VyXCIpLFxyXG4gICAgICAkY29udGVudCA9ICR0aGlzLmNoaWxkcmVuKFwiLnRvZ2dsZS1zZWN0aW9uX19jb250ZW50XCIpLFxyXG4gICAgICAkY2xvc2UgPSAkY29udGVudC5maW5kKFwiLnRvZ2dsZS1zZWN0aW9uX19jbG9zZVwiKSxcclxuICAgICAgc3RhdGUgPSAkdGhpcy5oYXNDbGFzcyhcImFjdGl2ZVwiKSA/IHRydWUgOiBmYWxzZSxcclxuICAgICAgaW5pdGlhbGl6ZWQ7XHJcbiAgICAkdG9nZ2xlLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzdGF0ZSA9ICFzdGF0ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgY2hlY2soKTtcclxuICAgIH0pO1xyXG4gICAgJGNsb3NlLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBzdGF0ZSA9IGZhbHNlO1xyXG4gICAgICBjaGVjaygpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCR0aGlzLmlzKFwiW2RhdGEtaG92ZXJdXCIpKSB7XHJcbiAgICAgIHZhciB0aW1lb3V0O1xyXG4gICAgICAkdG9nZ2xlLmFkZCgkY29udGVudCkub24oXCJtb3VzZWVudGVyXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmICghaXNUb3VjaCkge1xyXG4gICAgICAgICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgIHN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgIGNoZWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgJHRvZ2dsZS5hZGQoJGNvbnRlbnQpLm9uKFwibW91c2VsZWF2ZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBpZiAoIWlzVG91Y2gpIHtcclxuICAgICAgICAgIHZhciBkZWxheTtcclxuXHJcbiAgICAgICAgICBpZiAoJCh0aGlzKS5pcygkdG9nZ2xlKSkge1xyXG4gICAgICAgICAgICBkZWxheSA9IDUwMDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRlbGF5ID0gMTAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2hlY2soKTtcclxuICAgICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgkdGhpcy5pcyhcIltkYXRhLW91dC1oaWRlXVwiKSB8fCAkdGhpcy5pcyhcIltkYXRhLWhvdmVyXVwiKSkge1xyXG4gICAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrIHRvdWNoc3RhcnRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XHJcblxyXG4gICAgICAgIGlmICghJHRhcmdldC5jbG9zZXN0KCRjb250ZW50KS5sZW5ndGggJiYgISR0YXJnZXQuY2xvc2VzdCgkdG9nZ2xlKS5sZW5ndGggJiYgc3RhdGUpIHtcclxuICAgICAgICAgIHN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgICBjaGVjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2soKSB7XHJcbiAgICAgIGlmIChzdGF0ZSkge1xyXG4gICAgICAgICR0aGlzLmFkZCgkY29udGVudCkuYWRkKCR0b2dnbGUpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICBpZiAoJHRoaXMuaXMoXCJbZGF0YS1zbGlkZV1cIikpIHtcclxuICAgICAgICAgICRjb250ZW50LnNsaWRlRG93bihzcGVlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICR0aGlzLmFkZCgkdG9nZ2xlKS5hZGQoJGNvbnRlbnQpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICBpZiAoJHRoaXMuaXMoXCJbZGF0YS1zbGlkZV1cIikpIHtcclxuICAgICAgICAgIGlmIChpbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICAkY29udGVudC5zdG9wKCkuc2xpZGVVcChzcGVlZCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkY29udGVudC5oaWRlKDApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrKCk7XHJcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwKCkge1xyXG4gIHZhciAkYnRuID0gJChcIi5qcy11cFwiKTtcclxuXHJcbiAgZnVuY3Rpb24gY2hlY2soKSB7XHJcbiAgICB2YXIgc2Nyb2xsID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cclxuICAgIGlmIChzY3JvbGwgPiA1MCkge1xyXG4gICAgICAkYnRuLmFkZENsYXNzKFwidmlzaWJsZVwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICRidG4ucmVtb3ZlQ2xhc3MoXCJ2aXNpYmxlXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGV0IGlzVGhyb3R0bGVkID0gZmFsc2U7XHJcbiAgJCh3aW5kb3cpLm9uKFwic2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChpc1Rocm90dGxlZCkgcmV0dXJuO1xyXG4gICAgaXNUaHJvdHRsZWQgPSB0cnVlO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGNoZWNrKCk7XHJcbiAgICAgIGlzVGhyb3R0bGVkID0gZmFsc2U7XHJcbiAgICB9LCAxMDApO1xyXG4gIH0pO1xyXG4gIGNoZWNrKCk7XHJcbiAgJGJ0bi5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoXHJcbiAgICAgIHtcclxuICAgICAgICBzY3JvbGxUb3A6IDAsXHJcbiAgICAgIH0sXHJcbiAgICAgIDUwMFxyXG4gICAgKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhdEJsb2NrKCkge1xyXG4gIHZhciAkYmxvY2sgPSAkKFwiLmNoYXQtYmxvY2tcIiksXHJcbiAgICAkb3BlbiA9ICQoXCJbZGF0YS1jaGF0LW9wZW5dXCIpLFxyXG4gICAgJGNsb3NlID0gJChcIltkYXRhLWNoYXQtY2xvc2VdXCIpO1xyXG4gICRvcGVuLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgJGJsb2NrLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG4gICRjbG9zZS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICRibG9jay5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICB9KTtcclxufVxyXG5cclxudmFyINChdXN0b21JbnRlcmFjdGlvbiA9IGZ1bmN0aW9uINChdXN0b21JbnRlcmFjdGlvbigpIHtcclxuICB2YXIgX3RoaXMyID0gdGhpcztcclxuXHJcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xyXG5cclxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywg0KF1c3RvbUludGVyYWN0aW9uKTtcclxuXHJcbiAgdGhpcy50YXJnZXRzID0gb3B0aW9ucy50YXJnZXRzO1xyXG4gIHRoaXMudG91Y2hlbmREZWxheSA9IG9wdGlvbnMudG91Y2hlbmREZWxheSB8fCAxMDA7IC8vbXNcclxuXHJcbiAgdmFyIGV2ZW50cyA9IGZ1bmN0aW9uIGV2ZW50cyhldmVudCkge1xyXG4gICAgdmFyICR0YXJnZXRzID0gW107XHJcbiAgICAkdGFyZ2V0c1swXSA9IGV2ZW50LnRhcmdldCAhPT0gZG9jdW1lbnQgPyBldmVudC50YXJnZXQuY2xvc2VzdChfdGhpczIudGFyZ2V0cykgOiBudWxsO1xyXG4gICAgdmFyICRlbGVtZW50ID0gJHRhcmdldHNbMF0sXHJcbiAgICAgIGkgPSAwO1xyXG5cclxuICAgIHdoaWxlICgkdGFyZ2V0c1swXSkge1xyXG4gICAgICAkZWxlbWVudCA9ICRlbGVtZW50LnBhcmVudE5vZGU7XHJcblxyXG4gICAgICBpZiAoJGVsZW1lbnQgIT09IGRvY3VtZW50KSB7XHJcbiAgICAgICAgaWYgKCRlbGVtZW50Lm1hdGNoZXMoJHRhcmdldHMudmFsdWUpKSB7XHJcbiAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAkdGFyZ2V0c1tpXSA9ICRlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSAvL3RvdWNoc3RhcnRcclxuXHJcbiAgICBpZiAoZXZlbnQudHlwZSA9PSBcInRvdWNoc3RhcnRcIikge1xyXG4gICAgICBfdGhpczIudG91Y2hlZCA9IHRydWU7XHJcbiAgICAgIGlmIChfdGhpczIudGltZW91dCkgY2xlYXJUaW1lb3V0KF90aGlzMi50aW1lb3V0KTtcclxuXHJcbiAgICAgIGlmICgkdGFyZ2V0c1swXSkge1xyXG4gICAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcigkdGFyZ2V0cyksXHJcbiAgICAgICAgICBfc3RlcDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7ICkge1xyXG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9IF9zdGVwLnZhbHVlO1xyXG4gICAgICAgICAgICAkdGFyZ2V0LnNldEF0dHJpYnV0ZShcImRhdGEtdG91Y2hcIiwgXCJcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICBfaXRlcmF0b3IuZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy90b3VjaGVuZFxyXG4gICAgZWxzZSBpZiAoZXZlbnQudHlwZSA9PSBcInRvdWNoZW5kXCIgfHwgKGV2ZW50LnR5cGUgPT0gXCJjb250ZXh0bWVudVwiICYmIF90aGlzMi50b3VjaGVkKSkge1xyXG4gICAgICBfdGhpczIudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIF90aGlzMi50b3VjaGVkID0gZmFsc2U7XHJcbiAgICAgIH0sIF90aGlzMi50b3VjaGVuZERlbGF5KTtcclxuXHJcbiAgICAgIGlmICgkdGFyZ2V0c1swXSkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcigkdGFyZ2V0cyksXHJcbiAgICAgICAgICAgIF9zdGVwMjtcclxuXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOyApIHtcclxuICAgICAgICAgICAgICB2YXIgXyR0YXJnZXQgPSBfc3RlcDIudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgIF8kdGFyZ2V0LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtdG91Y2hcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTtcclxuICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIF9pdGVyYXRvcjIuZigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIF90aGlzMi50b3VjaGVuZERlbGF5KTtcclxuICAgICAgfVxyXG4gICAgfSAvL21vdXNlZW50ZXJcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIGV2ZW50LnR5cGUgPT0gXCJtb3VzZWVudGVyXCIgJiZcclxuICAgICAgIV90aGlzMi50b3VjaGVkICYmXHJcbiAgICAgICR0YXJnZXRzWzBdICYmXHJcbiAgICAgICR0YXJnZXRzWzBdID09IGV2ZW50LnRhcmdldFxyXG4gICAgKSB7XHJcbiAgICAgICR0YXJnZXRzWzBdLnNldEF0dHJpYnV0ZShcImRhdGEtaG92ZXJcIiwgXCJcIik7XHJcbiAgICB9XHJcbiAgICAvL21vdXNlbGVhdmVcclxuICAgIGVsc2UgaWYgKFxyXG4gICAgICBldmVudC50eXBlID09IFwibW91c2VsZWF2ZVwiICYmXHJcbiAgICAgICFfdGhpczIudG91Y2hlZCAmJlxyXG4gICAgICAkdGFyZ2V0c1swXSAmJlxyXG4gICAgICAkdGFyZ2V0c1swXSA9PSBldmVudC50YXJnZXRcclxuICAgICkge1xyXG4gICAgICAkdGFyZ2V0c1swXS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWNsaWNrXCIpO1xyXG4gICAgICAkdGFyZ2V0c1swXS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWhvdmVyXCIpO1xyXG4gICAgfSAvL21vdXNlZG93blxyXG5cclxuICAgIGlmIChldmVudC50eXBlID09IFwibW91c2Vkb3duXCIgJiYgIV90aGlzMi50b3VjaGVkICYmICR0YXJnZXRzWzBdKSB7XHJcbiAgICAgICR0YXJnZXRzWzBdLnNldEF0dHJpYnV0ZShcImRhdGEtY2xpY2tcIiwgXCJcIik7XHJcbiAgICB9XHJcbiAgICAvL21vdXNldXBcclxuICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT0gXCJtb3VzZXVwXCIgJiYgIV90aGlzMi50b3VjaGVkICYmICR0YXJnZXRzWzBdKSB7XHJcbiAgICAgICR0YXJnZXRzWzBdLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtY2xpY2tcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgZXZlbnRzKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgZXZlbnRzKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCBldmVudHMsIHRydWUpO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIGV2ZW50cywgdHJ1ZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBldmVudHMpO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGV2ZW50cyk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIGV2ZW50cyk7XHJcbn07XHJcbiIsInZhciBicmVha3BvaW50cyA9IHtcclxuICB4czogMCxcclxuICBzbTogNTc2LFxyXG4gIG1kOiA3NjgsXHJcbiAgbGc6IDEwMjQsXHJcbiAgeGw6IDEyODAsXHJcbn07XHJcbiIsImZ1bmN0aW9uIHRocm90dGxlKGRlbGF5LCBjYWxsYmFjaywgb3B0aW9ucykge1xyXG4gIHZhciBfcmVmID0gb3B0aW9ucyB8fCB7fSxcclxuICAgIF9yZWYkbm9UcmFpbGluZyA9IF9yZWYubm9UcmFpbGluZyxcclxuICAgIG5vVHJhaWxpbmcgPSBfcmVmJG5vVHJhaWxpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRub1RyYWlsaW5nLFxyXG4gICAgX3JlZiRub0xlYWRpbmcgPSBfcmVmLm5vTGVhZGluZyxcclxuICAgIG5vTGVhZGluZyA9IF9yZWYkbm9MZWFkaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkbm9MZWFkaW5nLFxyXG4gICAgX3JlZiRkZWJvdW5jZU1vZGUgPSBfcmVmLmRlYm91bmNlTW9kZSxcclxuICAgIGRlYm91bmNlTW9kZSA9IF9yZWYkZGVib3VuY2VNb2RlID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmJGRlYm91bmNlTW9kZTtcclxuXHJcbiAgdmFyIHRpbWVvdXRJRDtcclxuICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7XHJcblxyXG4gIHZhciBsYXN0RXhlYyA9IDA7XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyRXhpc3RpbmdUaW1lb3V0KCkge1xyXG4gICAgaWYgKHRpbWVvdXRJRCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElEKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNhbmNlbChvcHRpb25zKSB7XHJcbiAgICB2YXIgX3JlZjIgPSBvcHRpb25zIHx8IHt9LFxyXG4gICAgICBfcmVmMiR1cGNvbWluZ09ubHkgPSBfcmVmMi51cGNvbWluZ09ubHksXHJcbiAgICAgIHVwY29taW5nT25seSA9IF9yZWYyJHVwY29taW5nT25seSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR1cGNvbWluZ09ubHk7XHJcblxyXG4gICAgY2xlYXJFeGlzdGluZ1RpbWVvdXQoKTtcclxuICAgIGNhbmNlbGxlZCA9ICF1cGNvbWluZ09ubHk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB3cmFwcGVyKCkge1xyXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c18gPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XHJcbiAgICAgIGFyZ3VtZW50c19bX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gbGFzdEV4ZWM7XHJcblxyXG4gICAgaWYgKGNhbmNlbGxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZXhlYygpIHtcclxuICAgICAgbGFzdEV4ZWMgPSBEYXRlLm5vdygpO1xyXG4gICAgICBjYWxsYmFjay5hcHBseShzZWxmLCBhcmd1bWVudHNfKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgICAgdGltZW91dElEID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghbm9MZWFkaW5nICYmIGRlYm91bmNlTW9kZSAmJiAhdGltZW91dElEKSB7XHJcbiAgICAgIGV4ZWMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckV4aXN0aW5nVGltZW91dCgpO1xyXG5cclxuICAgIGlmIChkZWJvdW5jZU1vZGUgPT09IHVuZGVmaW5lZCAmJiBlbGFwc2VkID4gZGVsYXkpIHtcclxuICAgICAgaWYgKG5vTGVhZGluZykge1xyXG4gICAgICAgIGxhc3RFeGVjID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAgICAgaWYgKCFub1RyYWlsaW5nKSB7XHJcbiAgICAgICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KGRlYm91bmNlTW9kZSA/IGNsZWFyIDogZXhlYywgZGVsYXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleGVjKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAobm9UcmFpbGluZyAhPT0gdHJ1ZSkge1xyXG4gICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgIGRlYm91bmNlTW9kZSA/IGNsZWFyIDogZXhlYyxcclxuICAgICAgICBkZWJvdW5jZU1vZGUgPT09IHVuZGVmaW5lZCA/IGRlbGF5IC0gZWxhcHNlZCA6IGRlbGF5XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3cmFwcGVyLmNhbmNlbCA9IGNhbmNlbDtcclxuXHJcbiAgcmV0dXJuIHdyYXBwZXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlYm91bmNlKGRlbGF5LCBjYWxsYmFjaywgb3B0aW9ucykge1xyXG4gIHZhciBfcmVmID0gb3B0aW9ucyB8fCB7fSxcclxuICAgIF9yZWYkYXRCZWdpbiA9IF9yZWYuYXRCZWdpbixcclxuICAgIGF0QmVnaW4gPSBfcmVmJGF0QmVnaW4gPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRhdEJlZ2luO1xyXG5cclxuICByZXR1cm4gdGhyb3R0bGUoZGVsYXksIGNhbGxiYWNrLCB7XHJcbiAgICBkZWJvdW5jZU1vZGU6IGF0QmVnaW4gIT09IGZhbHNlLFxyXG4gIH0pO1xyXG59XHJcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xyXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xyXG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XHJcbiAgICAgIHJldHVybiBvYmogJiZcclxuICAgICAgICB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiZcclxuICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJlxyXG4gICAgICAgIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZVxyXG4gICAgICAgID8gXCJzeW1ib2xcIlxyXG4gICAgICAgIDogdHlwZW9mIG9iajtcclxuICAgIH07XHJcbiAgfVxyXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNsaWRlckRlYm91bmNlKGZ1bmMsIGludGVydmFsLCBjb250ZXh0KSB7XHJcbiAgdmFyIHRpbWVvdXQgPSBmYWxzZTtcclxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHMsXHJcbiAgICAgIF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQgfHwgX3RoaXMsIF9hcmd1bWVudHMpO1xyXG4gICAgfSwgaW50ZXJ2YWwpO1xyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IFNsaWRlckNvbnN0cnVjdG9yID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIFNsaWRlckNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTbGlkZXJDb25zdHJ1Y3Rvcik7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDbGFzcyhTbGlkZXJDb25zdHJ1Y3RvciwgW1xyXG4gICAge1xyXG4gICAgICBrZXk6IFwiaW5pdFwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgICAgICBsZXQgX3RoaXMzID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5hdXRvcGxheSA9IHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF1dG9wbGF5LXRpbWVvdXRcIikgIT09IG51bGw7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuYXV0b3BsYXlUaW1lb3V0ID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWF1dG9wbGF5LXRpbWVvdXRcIikgfHwgNTAwMDtcclxuICAgICAgICB0aGlzLnBhcmFtcy5hcnJvd3MgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uby1hcnJvd3NcIikgPT09IG51bGwgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lZGlhUXVlcnkgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihtaW4td2lkdGg6IDU3NS45OHB4KVwiKTtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgbWVkaWEgcXVlcnkgaXMgdHJ1ZVxyXG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5Lm1hdGNoZXMpIHtcclxuICAgICAgICAgIHRoaXMucGFyYW1zLmRvdHMgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uby1kb3RzXCIpID09PSBudWxsID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnBhcmFtcy5kb3RzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucGFyYW1zLmFkYXB0aXZlSGVpZ2h0ID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtYWRhcHRpdmUtaGVpZ2h0XCIpICE9PSBudWxsO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLmNlbnRlck1vZGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1jZW50ZXJcIikgPT09IG51bGwgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuY291bnQgPSB7fTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC54cyA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZXNcIikgfHwgMTtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC5zbSA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbS1zbGlkZXNcIikgfHwgdGhpcy5wYXJhbXMuY291bnQueHM7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMuY291bnQubWQgPSArdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWQtc2xpZGVzXCIpIHx8IHRoaXMucGFyYW1zLmNvdW50LnNtO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLmNvdW50LmxnID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxnLXNsaWRlc1wiKSB8fCB0aGlzLnBhcmFtcy5jb3VudC5tZDtcclxuICAgICAgICB0aGlzLnBhcmFtcy5jb3VudC54bCA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS14bC1zbGlkZXNcIikgfHwgdGhpcy5wYXJhbXMuY291bnQubGc7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMucm93cyA9IHt9O1xyXG4gICAgICAgICh0aGlzLnBhcmFtcy5yb3dzLnhzID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJvd3NcIikgfHwgMSksXHJcbiAgICAgICAgICAodGhpcy5wYXJhbXMucm93cy5zbSA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbS1yb3dzXCIpIHx8IHRoaXMucGFyYW1zLnJvd3MueHMpLFxyXG4gICAgICAgICAgKHRoaXMucGFyYW1zLnJvd3MubWQgPSArdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWQtcm93c1wiKSB8fCB0aGlzLnBhcmFtcy5yb3dzLnNtKSxcclxuICAgICAgICAgICh0aGlzLnBhcmFtcy5yb3dzLmxnID0gK3RoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxnLXJvd3NcIikgfHwgdGhpcy5wYXJhbXMucm93cy5tZCksXHJcbiAgICAgICAgICAodGhpcy5wYXJhbXMucm93cy54bCA9ICt0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS14bC1yb3dzXCIpIHx8IHRoaXMucGFyYW1zLnJvd3MubGcpO1xyXG4gICAgICAgIHRoaXMucGFyYW1zLnN0YXRlID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcclxuICAgICAgICAgIGxldCBicmVha3BvaW50ID0gaW5kZXggIT09IDAgPyBcIi1cIiArIGtleSArIFwiLVwiIDogXCItXCI7XHJcblxyXG4gICAgICAgICAgbGV0IGF0dHIgPSBfdGhpczMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwibW91bnRlZFwiKSk7XHJcblxyXG4gICAgICAgICAgaWYgKGF0dHIgPT09IG51bGwgJiYgaW5kZXggIT09IDApIHtcclxuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSBPYmplY3Qua2V5cyhicmVha3BvaW50cylbaW5kZXggLSAxXTtcclxuICAgICAgICAgICAgX3RoaXMzLnBhcmFtcy5zdGF0ZVtrZXldID0gX3RoaXMzLnBhcmFtcy5zdGF0ZVtwcmV2S2V5XTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoYXR0ciA9PT0gXCJ0cnVlXCIgfHwgKGluZGV4ID09PSAwICYmIGF0dHIgIT09IFwiZmFsc2VcIikpIHtcclxuICAgICAgICAgICAgX3RoaXMzLnBhcmFtcy5zdGF0ZVtrZXldID0gdHJ1ZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzMy5wYXJhbXMuc3RhdGVba2V5XSA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2xpZGVzID0gW107XHJcbiAgICAgICAgdGhpcy5jb250YWluc01vYmlsZUhpZGRlblNsaWRlcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jaGlsZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgICAgICBpZiAoIXNsaWRlLnRhZ05hbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICBpZiAoc2xpZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS1tb2JpbGUtaGlkZGVuXCIpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIF90aGlzMy5jb250YWluc01vYmlsZUhpZGRlblNsaWRlcyA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgX3RoaXMzLnNsaWRlcy5wdXNoKHNsaWRlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUljb25zKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NsaWRlclN0YXRlKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja1NsaWRlclN0YXRlRGVib3VuY2VkID0gc2xpZGVyRGVib3VuY2UodGhpcy5jaGVja1NsaWRlclN0YXRlLCA1MDAsIHRoaXMpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuY2hlY2tTbGlkZXJTdGF0ZURlYm91bmNlZCk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY3JlYXRlSWNvbnNcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUljb25zKCkge1xyXG4gICAgICAgIGxldCBsZWZ0SWNvbiA9XHJcbiAgICAgICAgICAnXFxuICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDExIDE5XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cXG4gICAgICAgIDxwYXRoIGQ9XCJNMS40IDE4LjFMMCAxNi43TDcuNiA5LjEwMDAxTDAgMS41TDEuNCAwTDEwLjQgOS4xMDAwMUMxMC40IDkuMTAwMDEgMS4zIDE4LjEgMS40IDE4LjFaXCIvPlxcbiAgICAgIDwvc3ZnPlxcbiAgICAnO1xyXG4gICAgICAgIGxldCByaWdodEljb24gPVxyXG4gICAgICAgICAgJ1xcbiAgICAgIDxzdmcgdmlld0JveD1cIjAgMCAxMSAxOVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XFxuICAgICAgICA8cGF0aCBkPVwiTTkuMDAwMzkgNy4yNDc5MmUtMDVMMTAuNDAwNCAxLjQwMDA3TDIuODAwMzkgOS4wMDAwOUwxMC40MDA0IDE2LjYwMDFMOS4wMDAzOSAxOC4xMDAxTDAuMDAwMzkxMDA2IDkuMDAwMDlDMC4wMDAzOTEwMDYgOS4wMDAwOSA5LjEwMDM5IDcuMjQ3OTJlLTA1IDkuMDAwMzkgNy4yNDc5MmUtMDVaXCIvPlxcbiAgICAgIDwvc3ZnPlxcbiAgICAnO1xyXG4gICAgICAgIGxldCBsZWZ0SWNvbkNsYXNzID0gXCJjdXN0b20taWNvbi1sZWZ0XCI7XHJcbiAgICAgICAgbGV0IHJpZ2h0SWNvbkNsYXNzID0gXCJjdXN0b20taWNvbi1yaWdodFwiO1xyXG4gICAgICAgIGxldCBjdXN0b21JY29ucyA9IHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgICAgICAgXCIuXCIuY29uY2F0KGxlZnRJY29uQ2xhc3MsIFwiLCAuXCIpLmNvbmNhdChyaWdodEljb25DbGFzcylcclxuICAgICAgICApO1xyXG4gICAgICAgIGN1c3RvbUljb25zLmZvckVhY2goZnVuY3Rpb24gKGljb24pIHtcclxuICAgICAgICAgIGxldCBpc0xlZnRJY29uID0gaWNvbi5jbGFzc0xpc3QuY29udGFpbnMobGVmdEljb25DbGFzcyk7XHJcbiAgICAgICAgICBsZXQgaXNSaWdodEljb24gPSBpY29uLmNsYXNzTGlzdC5jb250YWlucyhyaWdodEljb25DbGFzcyk7XHJcblxyXG4gICAgICAgICAgaWYgKGlzTGVmdEljb24pIHtcclxuICAgICAgICAgICAgaWNvbi5jbGFzc0xpc3QucmVtb3ZlKGxlZnRJY29uQ2xhc3MpO1xyXG4gICAgICAgICAgICBsZWZ0SWNvbiA9IGljb24ub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChpc1JpZ2h0SWNvbikge1xyXG4gICAgICAgICAgICBpY29uLmNsYXNzTGlzdC5yZW1vdmUocmlnaHRJY29uQ2xhc3MpO1xyXG4gICAgICAgICAgICByaWdodEljb24gPSBpY29uLm91dGVySFRNTDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpY29uLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubmV4dEFycm93ID0gJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnV0dG9uIGJ1dHRvbl9zdHlsZS0xIHNsaWNrLW5leHRcIj4nLmNvbmNhdChcclxuICAgICAgICAgIGxlZnRJY29uLFxyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5wcmV2QXJyb3cgPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidXR0b24gYnV0dG9uX3N0eWxlLTEgc2xpY2stcHJldlwiPicuY29uY2F0KFxyXG4gICAgICAgICAgcmlnaHRJY29uLFxyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY2hlY2tTbGlkZXJTdGF0ZVwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tTbGlkZXJTdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIHRoaXMuc2F2ZWRXaW5kb3dXaWR0aCA9PT0gd2luZG93LmlubmVyV2lkdGgpIHJldHVybjtcclxuICAgICAgICB0aGlzLnNhdmVkV2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubW91bnRlZCkge1xyXG4gICAgICAgICAgdGhpcy51bm1vdW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3RhdGU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMpIHtcclxuICAgICAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSBicmVha3BvaW50c1ticmVha3BvaW50XSkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IHRoaXMucGFyYW1zLnN0YXRlW2JyZWFrcG9pbnRdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHN0YXRlKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XHJcblxyXG4gICAgICAgICAgaWYgKHRoaXMuY29udGFpbnNNb2JpbGVIaWRkZW5TbGlkZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1NsaWRlc1Zpc2liaWxpdHkoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLm1vdW50KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwiY2hlY2tTbGlkZXNWaXNpYmlsaXR5XCIsXHJcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja1NsaWRlc1Zpc2liaWxpdHkoKSB7XHJcbiAgICAgICAgbGV0IF90aGlzNCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgICAgICBzbGlkZS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICAgICAgbGV0IHNob3VsZEJlSGlkZGVuID0gc2xpZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS1tb2JpbGUtaGlkZGVuXCIpICE9PSBudWxsO1xyXG4gICAgICAgICAgbGV0IGJyZWFrcG9pbnQgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IGJyZWFrcG9pbnRzLnNtO1xyXG5cclxuICAgICAgICAgIGlmICghKHNob3VsZEJlSGlkZGVuICYmIGJyZWFrcG9pbnQpKSB7XHJcbiAgICAgICAgICAgIF90aGlzNC5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLCBzbGlkZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwibW91bnRcIixcclxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1vdW50KCkge1xyXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5zbGljayh7XHJcbiAgICAgICAgICBhdXRvcGxheTogdGhpcy5wYXJhbXMuYXV0b3BsYXksXHJcbiAgICAgICAgICBhdXRvcGxheVNwZWVkOiB0aGlzLnBhcmFtcy5hdXRvcGxheVRpbWVvdXQsXHJcbiAgICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcclxuICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQueHMsXHJcbiAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQueHMsXHJcbiAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnhzLFxyXG4gICAgICAgICAgcHJldkFycm93OiB0aGlzLnByZXZBcnJvdyxcclxuICAgICAgICAgIG5leHRBcnJvdzogdGhpcy5uZXh0QXJyb3csXHJcbiAgICAgICAgICBhcnJvd3M6IHRoaXMucGFyYW1zLmFycm93cyxcclxuICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0aGlzLnBhcmFtcy5hZGFwdGl2ZUhlaWdodCxcclxuICAgICAgICAgIGRvdHM6IHRoaXMucGFyYW1zLmRvdHMsXHJcbiAgICAgICAgICBjZW50ZXJNb2RlOiB0aGlzLnBhcmFtcy5jZW50ZXJNb2RlLFxyXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eTogZmFsc2UsXHJcbiAgICAgICAgICByZXNwb25zaXZlOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5zbSAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQuc20sXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQuc20sXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnNtLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5tZCAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQubWQsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQubWQsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLm1kLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy5sZyAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQubGcsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQubGcsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLmxnLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBicmVha3BvaW50OiBicmVha3BvaW50cy54bCAtIDEsXHJcbiAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogdGhpcy5wYXJhbXMuY291bnQueGwsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogdGhpcy5wYXJhbXMuY291bnQueGwsXHJcbiAgICAgICAgICAgICAgICByb3dzOiB0aGlzLnBhcmFtcy5yb3dzLnhsLFxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBrZXk6IFwidW5tb3VudFwiLFxyXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gdW5tb3VudCgpIHtcclxuICAgICAgICAkKHRoaXMuZWxlbWVudCkuc2xpY2soXCJ1bnNsaWNrXCIpO1xyXG4gICAgICAgIHRoaXMubW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICBdKTtcclxuXHJcbiAgcmV0dXJuIFNsaWRlckNvbnN0cnVjdG9yO1xyXG59KSgpO1xyXG4iLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgJChcIi5jYXRhbG9nLWZpbHRlci1hY2NvcmRpb24gYS5vcGVuZXJcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoKS5maW5kKFwidWw6Zmlyc3RcIikuc2xpZGVUb2dnbGUoKTtcclxuICAgICQodGhpcykucGFyZW50KCkudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1leHBhbmRdXCIpLm9uKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudCgpO1xyXG4gICAgcGFyZW50LmZpbmQoXCJbZGF0YS1jb2xsYXBzZS1jb250ZW50XVwiKS5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgIHBhcmVudC5maW5kKFwiW2RhdGEtY29sbGFwc2VdXCIpLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpO1xyXG4gICAgdGFyZ2V0LmFkZENsYXNzKFwiZC1ub25lXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtY29sbGFwc2VdXCIpLm9uKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgY29uc3QgcGFyZW50ID0gdGFyZ2V0LnBhcmVudCgpO1xyXG4gICAgcGFyZW50LmZpbmQoXCJbZGF0YS1jb2xsYXBzZS1jb250ZW50XVwiKS5hZGRDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgIHBhcmVudC5maW5kKFwiW2RhdGEtZXhwYW5kXVwiKS5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcclxuICAgIHRhcmdldC5hZGRDbGFzcyhcImQtbm9uZVwiKTtcclxuICB9KTtcclxuXHJcbiAgJChcIltkYXRhLWV4cGFuZC1tZW51XVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICQoXCIubW9iaWxlLXNpZGUtbWVudV9fYmFja2dyb3VuZFwiKS5hZGRDbGFzcyhcImQtYmxvY2tcIik7XHJcbiAgICAkKFwiLm1vYmlsZS1zaWRlLW1lbnUtY29udGVudFwiKS5hZGRDbGFzcyhcIm1vYmlsZS1zaWRlLW1lbnUtY29udGVudF9hY3RpdmVcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1jb2xsYXBzZS1tZW51XVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICQoXCIubW9iaWxlLXNpZGUtbWVudV9fYmFja2dyb3VuZFwiKS5yZW1vdmVDbGFzcyhcImQtYmxvY2tcIik7XHJcbiAgICAkKFwiLm1vYmlsZS1zaWRlLW1lbnUtY29udGVudFwiKS5yZW1vdmVDbGFzcyhcIm1vYmlsZS1zaWRlLW1lbnUtY29udGVudF9hY3RpdmVcIik7XHJcbiAgICAkKGBbZGF0YS1tZW51LXBhZ2VdOm5vdCg6Zmlyc3QtY2hpbGQpYCkucmVtb3ZlQ2xhc3MoXCJtb2JpbGUtc2lkZS1tZW51LWNvbnRlbnRfX3BhZ2VfYWN0aXZlXCIpO1xyXG4gIH0pO1xyXG5cclxuICAkKFwiW2RhdGEtbWVudS1wYWdlLWV4cGFuZF1cIikub24oXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IGlkID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5hdHRyKFwiZGF0YS1tZW51LXBhZ2UtZXhwYW5kXCIpO1xyXG4gICAgJChgW2RhdGEtbWVudS1wYWdlPVwiJHtpZH1cIl1gKS5hZGRDbGFzcyhcIm1vYmlsZS1zaWRlLW1lbnUtY29udGVudF9fcGFnZV9hY3RpdmVcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1tZW51LXBhZ2UtY29sbGFwc2VdXCIpLm9uKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICBjb25zdCBpZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuYXR0cihcImRhdGEtbWVudS1wYWdlLWNvbGxhcHNlXCIpO1xyXG4gICAgJChgW2RhdGEtbWVudS1wYWdlPVwiJHtpZH1cIl1gKS5yZW1vdmVDbGFzcyhcIm1vYmlsZS1zaWRlLW1lbnUtY29udGVudF9fcGFnZV9hY3RpdmVcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1vcGVuLWJvdHRvbS1kcm9wZG93bl1cIikub24oXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcclxuICAgICQoXCIuYm90dG9tLW1vYmlsZS1tZW51LWxpc3RcIikudG9nZ2xlQ2xhc3MoXCJib3R0b20tbW9iaWxlLW1lbnUtbGlzdF9hY3RpdmVcIik7XHJcbiAgICAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLnRvZ2dsZUNsYXNzKFwiYm90dG9tLW1vYmlsZS1tZW51LWJ1dHRvbl9hY3RpdmVcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCJbZGF0YS1jbG9zZS1zZWFyY2gtbW9kYWxdXCIpLm9uKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgJChcIi5zZWFyY2gtbW9kYWwtd2luZG93XCIpLnJlbW92ZUNsYXNzKFwiZC1ibG9ja1wiKTtcclxuICB9KTtcclxuXHJcbiAgJChcIltkYXRhLW9wZW4tc2VhcmNoLW1vZGFsXVwiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICQoXCIuc2VhcmNoLW1vZGFsLXdpbmRvd1wiKS5hZGRDbGFzcyhcImQtYmxvY2tcIik7XHJcbiAgfSk7XHJcblxyXG4gICQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fc2VjdG9yXCIpLm9uKFwibW91c2Vtb3ZlXCIsIChldmVudCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcclxuICAgIGNvbnN0IGlkID0gdGFyZ2V0LmF0dHIoXCJkYXRhLXNlY3RvclwiKTtcclxuICAgIGNvbnN0IHBhcmVudCA9IHRhcmdldC5wYXJlbnQoKS5wYXJlbnQoKTtcclxuICAgIHBhcmVudFxyXG4gICAgLmZpbmQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpXHJcbiAgICAucmVtb3ZlQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICBwYXJlbnRcclxuICAgIC5maW5kKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIilcclxuICAgIC5yZW1vdmVDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIik7XHJcbiAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWltYWdlPVwiJHtpZH1cIl1gKS5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKTtcclxuICAgIHBhcmVudC5maW5kKGBbZGF0YS1zZWN0b3ItZG90PVwiJHtpZH1cIl1gKS5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIik7XHJcbiAgfSk7XHJcblxyXG4gIGxldCB0b3VjaHN0YXJ0WCA9IDA7XHJcbiAgbGV0IHRvdWNoZW5kWCA9IDA7XHJcblxyXG4gICQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fc2VjdG9yc1wiKS5vbihcInRvdWNoc3RhcnRcIiwgKGV2ZW50KSA9PiB7XHJcbiAgICB0b3VjaHN0YXJ0WCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnNjcmVlblg7XHJcbiAgfSk7XHJcblxyXG4gICQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fc2VjdG9yc1wiKS5vbihcInRvdWNoZW5kXCIsIChldmVudCkgPT4ge1xyXG4gICAgdG91Y2hlbmRYID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uc2NyZWVuWDtcclxuICAgIGNvbnN0IHBhcmVudCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50KCk7XHJcbiAgICBjb25zdCBpbWcgPSBwYXJlbnQuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICBjb25zdCBpZCA9IE51bWJlcihpbWcuYXR0cihcImRhdGEtc2VjdG9yLWltYWdlXCIpKTtcclxuICAgIGNvbnN0IGxlbmd0aCA9IHBhcmVudC5maW5kKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlXCIpLmxlbmd0aDtcclxuXHJcbiAgICBpZiAodG91Y2hlbmRYIDwgdG91Y2hzdGFydFgpIHtcclxuICAgICAgcGFyZW50XHJcbiAgICAgIC5maW5kKFwiLnByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKVxyXG4gICAgICAucmVtb3ZlQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICAgIHBhcmVudFxyXG4gICAgICAuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpXHJcbiAgICAgIC5yZW1vdmVDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2RvdF9hY3RpdmVcIik7XHJcbiAgICAgIGlmIChpZCA+PSBsZW5ndGgpIHtcclxuICAgICAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWltYWdlPVwiJHsxfVwiXWApLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgICAgIHBhcmVudC5maW5kKGBbZGF0YS1zZWN0b3ItZG90PVwiJHsxfVwiXWApLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcGFyZW50XHJcbiAgICAgIC5maW5kKGBbZGF0YS1zZWN0b3ItaW1hZ2U9XCIke2lkICsgMX1cIl1gKVxyXG4gICAgICAuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICAgIHBhcmVudC5maW5kKGBbZGF0YS1zZWN0b3ItZG90PVwiJHtpZCArIDF9XCJdYCkuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRvdWNoZW5kWCA+IHRvdWNoc3RhcnRYKSB7XHJcbiAgICAgIHBhcmVudFxyXG4gICAgICAuZmluZChcIi5wcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIilcclxuICAgICAgLnJlbW92ZUNsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19faW1hZ2VfYWN0aXZlXCIpO1xyXG4gICAgICBwYXJlbnRcclxuICAgICAgLmZpbmQoXCIucHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKVxyXG4gICAgICAucmVtb3ZlQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gICAgICBpZiAoaWQgPD0gMSkge1xyXG4gICAgICAgIHBhcmVudFxyXG4gICAgICAgIC5maW5kKGBbZGF0YS1zZWN0b3ItaW1hZ2U9XCIke2xlbmd0aH1cIl1gKVxyXG4gICAgICAgIC5hZGRDbGFzcyhcInByb2R1Y3QtY2FyZC1zbGlkZXNob3dfX2ltYWdlX2FjdGl2ZVwiKTtcclxuICAgICAgICBwYXJlbnQuZmluZChgW2RhdGEtc2VjdG9yLWRvdD1cIiR7bGVuZ3RofVwiXWApLmFkZENsYXNzKFwicHJvZHVjdC1jYXJkLXNsaWRlc2hvd19fZG90X2FjdGl2ZVwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcGFyZW50XHJcbiAgICAgIC5maW5kKGBbZGF0YS1zZWN0b3ItaW1hZ2U9XCIke2lkIC0gMX1cIl1gKVxyXG4gICAgICAuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19pbWFnZV9hY3RpdmVcIik7XHJcbiAgICAgIHBhcmVudC5maW5kKGBbZGF0YS1zZWN0b3ItZG90PVwiJHtpZCAtIDF9XCJdYCkuYWRkQ2xhc3MoXCJwcm9kdWN0LWNhcmQtc2xpZGVzaG93X19kb3RfYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKFwiLmxpa2UtYnRuXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICB9KTtcclxuICAkKFwiLmNpdHktc2VsZWN0aW9uX19saW5rXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIuY2l0eS1zZWxlY3Rpb25fX2xpc3RcIikudG9nZ2xlKDApO1xyXG4gIH0pO1xyXG4gICQod2luZG93KS5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjaXR5LXNlbGVjdGlvbl9fbGlua1wiKSkge1xyXG4gICAgICAkKFwiLmNpdHktc2VsZWN0aW9uX19saXN0XCIpLnRvZ2dsZShmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgJChcIi5idXJnZXItbWVudVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLm1vYmlsZS1tZW51XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmNhdGFsb2ctaW5uZXItYnRuXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwib3BlblwiKTtcclxuICAgICQoXCIuY2F0YWxvZy1oZWFkZXItY29udGVudFwiKS50b2dnbGUoMCk7XHJcbiAgfSk7XHJcbiAgJChcIi5jYXRhbG9nLWlubmVyLWJ0biwuY2F0YWxvZy1tZW51X19oZWFkIGFcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICQoXCIuY2F0YWxvZy1tZW51XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmJ1cmdlci1jYXRhbG9nXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwib3BlblwiKTtcclxuICB9KTtcclxuICAkKFwiLnNoYXJlLWJ0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLnNoYXJlLWJsb2NrX19zaG93XCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmNsb3NlLXBhbmVsXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIuYm90dG9tLXBhbmVsXCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmZpbHRlci1idG4sIC5jbG9zZS1idG4tMlwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICAkKFwiLmNhdGFsb2ctZmlsdGVyXCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmNhdGFsb2ctc2lkZV9fdGl0bGVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIi5jYXRhbG9nLXNpZGVfX2NvbnRlbnRcIikudG9nZ2xlKDApO1xyXG4gICAgJChcIi5jYXRhbG9nLXNpZGVfX2NvbnRlbnQtYWNjb3JkZW9uXCIpLnRvZ2dsZSgwKTtcclxuICB9KTtcclxuICAkKFwiLmNhdGFsb2ctb3BlbmVkXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQoXCIuY2F0YWxvZy1vcGVuZWQgLnN1Ym1lbnVcIikudG9nZ2xlKDApO1xyXG4gIH0pO1xyXG4gICQoXCIuYnVyZ2VyLW1lbnVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcIm1lbnUtb25cIik7XHJcbiAgfSk7XHJcbiAgJChcIi5jYXRhbG9nLWlubmVyXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJvcGVuXCIpO1xyXG4gICAgJChcIi5jYXRhbG9nLWlubmVyLWNvbnRlbnRcIikudG9nZ2xlKDApO1xyXG4gIH0pO1xyXG59KTtcclxuIiwiJChmdW5jdGlvbiAoKSB7XHJcbiAgLy8gVGhpcyB3aWxsIHNlbGVjdCBldmVyeXRoaW5nIHdpdGggdGhlIGNsYXNzIHNtb290aFNjcm9sbFxyXG4gIC8vIFRoaXMgc2hvdWxkIHByZXZlbnQgcHJvYmxlbXMgd2l0aCBjYXJvdXNlbCwgc2Nyb2xsc3B5LCBldGMuLi5cclxuICAkKFwiLnNtb290aFNjcm9sbFwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKSA9PSB0aGlzLnBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKSAmJlxyXG4gICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PSB0aGlzLmhvc3RuYW1lXHJcbiAgICApIHtcclxuICAgICAgdmFyIHRhcmdldCA9ICQodGhpcy5oYXNoKTtcclxuICAgICAgdGFyZ2V0ID0gdGFyZ2V0Lmxlbmd0aCA/IHRhcmdldCA6ICQoXCJbbmFtZT1cIiArIHRoaXMuaGFzaC5zbGljZSgxKSArIFwiXVwiKTtcclxuXHJcbiAgICAgIGlmICh0YXJnZXQubGVuZ3RoKSB7XHJcbiAgICAgICAgJChcImh0bWwsYm9keVwiKS5hbmltYXRlKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6IHRhcmdldC5vZmZzZXQoKS50b3AsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgMTAwMFxyXG4gICAgICAgICk7IC8vIFRoZSBudW1iZXIgaGVyZSByZXByZXNlbnRzIHRoZSBzcGVlZCBvZiB0aGUgc2Nyb2xsIGluIG1pbGxpc2Vjb25kc1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSk7XHJcbiIsIihmdW5jdGlvbiAoJCkge1xyXG4gIHZhciBjdXN0b21TZWxlY3QgPSAkKFwic2VsZWN0LmN1c3RvbS1zZWxlY3RcIik7IC8vIEZJUlNULCBjcmVhdGUgdGhlIGN1c3RvbSBzZWxlY3QgbWVudXMgZnJvbSB0aGUgZXhpc3Rpbmcgc2VsZWN0XHJcblxyXG4gIGN1c3RvbVNlbGVjdC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB0aGF0ID0gJCh0aGlzKTtcclxuICAgIHZhciBsaXN0SUQgPSB0aGF0LmF0dHIoXCJpZFwiKSxcclxuICAgICAgZ3JvdXBzID0gdGhhdC5jaGlsZHJlbihcIm9wdGdyb3VwXCIpLFxyXG4gICAgICB0aGVPcHRpb25zID0gXCJcIixcclxuICAgICAgc3RhcnRpbmdPcHRpb24gPSBcIlwiLFxyXG4gICAgICBjdXN0b21TZWxlY3QgPSBcIlwiOyAvL2NoZWNrIGlmIHRoZXJlIGFyZSBvcHRpb24gZ3JvdXBzXHJcblxyXG4gICAgaWYgKGdyb3Vwcy5sZW5ndGgpIHtcclxuICAgICAgZ3JvdXBzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJHcm91cCA9ICQodGhpcyk7XHJcbiAgICAgICAgdmFyIGN1ck5hbWUgPSBjdXJHcm91cC5hdHRyKFwibGFiZWxcIik7IC8vT3BlbiB0aGUgb3B0aW9uIGdyb3VwXHJcblxyXG4gICAgICAgIHRoZU9wdGlvbnMgKz0gJzxsaSBjbGFzcz1cIm9wdGdyb3VwXCI+JyArIGN1ck5hbWUgKyBcIjwvbGk+XCI7IC8vZ2V0IHRoZSBvcHRpb25zXHJcblxyXG4gICAgICAgIGN1ckdyb3VwLmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyIGN1ck9wdCA9ICQodGhpcyk7XHJcbiAgICAgICAgICB2YXIgY3VyVmFsID0gY3VyT3B0LmF0dHIoXCJ2YWx1ZVwiKSxcclxuICAgICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICAgIGlzU2VsZWN0ZWQgPSBjdXJPcHQuYXR0cihcInNlbGVjdGVkXCIpO1xyXG5cclxuICAgICAgICAgIGlmIChpc1NlbGVjdGVkID09PSBcInNlbGVjdGVkXCIpIHtcclxuICAgICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgICB0aGVPcHRpb25zICs9ICc8bGkgY2xhc3M9XCJzZWxlY3RlZFwiIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pOyAvL0Nsb3NlIHRoZSBvcHRpb24gZ3JvdXBcclxuICAgICAgICAvL3RoZU9wdGlvbnMgKz0gJzxsaSBjbGFzcz1cIm9wdGdyb3VwLWNsb3NlXCI+PC9saT4nO1xyXG4gICAgICB9KTsgLy9hZGQgb3B0aW9ucyBub3QgaW4gYSBncm91cCB0byB0aGUgdG9wIG9mIHRoZSBsaXN0XHJcblxyXG4gICAgICB0aGF0LmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJPcHQgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBjdXJWYWwgPSBjdXJPcHQuYXR0cihcInZhbHVlXCIpLFxyXG4gICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICBpc1NlbGVjdGVkID0gY3VyT3B0LmF0dHIoXCJzZWxlY3RlZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQgPT09IFwic2VsZWN0ZWRcIikge1xyXG4gICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyA9XHJcbiAgICAgICAgICAgICc8bGkgY2xhc3M9XCJzZWxlY3RlZFwiIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiICsgdGhlT3B0aW9ucztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyA9ICc8bGkgZGF0YS12YWx1ZT1cIicgKyBjdXJWYWwgKyAnXCI+JyArIGN1ckh0bWwgKyBcIjwvbGk+XCIgKyB0aGVPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGF0LmNoaWxkcmVuKFwib3B0aW9uXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJPcHQgPSAkKHRoaXMpO1xyXG4gICAgICAgIHZhciBjdXJWYWwgPSBjdXJPcHQuYXR0cihcInZhbHVlXCIpLFxyXG4gICAgICAgICAgY3VySHRtbCA9IGN1ck9wdC5odG1sKCksXHJcbiAgICAgICAgICBpc1NlbGVjdGVkID0gY3VyT3B0LmF0dHIoXCJzZWxlY3RlZFwiKTtcclxuXHJcbiAgICAgICAgaWYgKGlzU2VsZWN0ZWQgPT09IFwic2VsZWN0ZWRcIikge1xyXG4gICAgICAgICAgc3RhcnRpbmdPcHRpb24gPSBjdXJIdG1sO1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGNsYXNzPVwic2VsZWN0ZWRcIiBkYXRhLXZhbHVlPVwiJyArIGN1clZhbCArICdcIj4nICsgY3VySHRtbCArIFwiPC9saT5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhlT3B0aW9ucyArPSAnPGxpIGRhdGEtdmFsdWU9XCInICsgY3VyVmFsICsgJ1wiPicgKyBjdXJIdG1sICsgXCI8L2xpPlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IC8vYnVpbGQgdGhlIGN1c3RvbSBzZWxlY3RcclxuXHJcbiAgICBjdXN0b21TZWxlY3QgPVxyXG4gICAgICAnPGRpdiBjbGFzcz1cImRyb3Bkb3duLWNvbnRhaW5lclwiPjxkaXYgY2xhc3M9XCJkcm9wZG93bi1zZWxlY3QgZW50eXBvLWRvd24tb3Blbi1iaWdcIj48c3ZnIGNsYXNzPVwiaWNvblwiPjx1c2UgeGxpbms6aHJlZj1cIiN0YWItYXJyb3dcIj48L3VzZT48L3N2Zz48c3Bhbj4nICtcclxuICAgICAgc3RhcnRpbmdPcHRpb24gK1xyXG4gICAgICAnPC9zcGFuPjwvZGl2Pjx1bCBjbGFzcz1cImRyb3Bkb3duLXNlbGVjdC11bFwiIGRhdGEtcm9sZT1cIicgK1xyXG4gICAgICBsaXN0SUQgK1xyXG4gICAgICAnXCI+JyArXHJcbiAgICAgIHRoZU9wdGlvbnMgK1xyXG4gICAgICBcIjwvdWw+PC9kaXY+IDwhLS0gLmN1c3RvbS1zZWxlY3Qtd3JhcHBlciAtLT5cIjsgLy9hcHBlbmQgaXQgYWZ0ZXIgdGhlIGFjdHVhbCBzZWxlY3RcclxuXHJcbiAgICAkKGN1c3RvbVNlbGVjdCkuaW5zZXJ0QWZ0ZXIodGhhdCk7XHJcbiAgfSk7XHJcbiAgdmFyIHNlbGVjdGRkID0gJChcIi5kcm9wZG93bi1zZWxlY3RcIiksXHJcbiAgICBzZWxlY3R1bCA9ICQoXCIuZHJvcGRvd24tc2VsZWN0LXVsXCIpLFxyXG4gICAgc2VsZWN0bGkgPSAkKFwiLmRyb3Bkb3duLXNlbGVjdC11bCBsaVwiKTsgLy9USEVOIG1ha2UgdGhlbSB3b3JrXHJcblxyXG4gIHNlbGVjdGRkLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pOyAvL0hpZGUgaXQgb24gbW91c2VsZWF2ZVxyXG5cclxuICBzZWxlY3R1bC5vbihcIm1vdXNlbGVhdmVcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG4gIH0pOyAvL3NlbGVjdCB0aGUgb3B0aW9uXHJcblxyXG4gIHNlbGVjdGxpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRoYXQgPSAkKHRoaXMpOyAvL2Vuc3VyZSBjbGlja2luZyBncm91cCBsYWJlbHMgZG9lcyBub3QgY2F1c2UgY2hhbmdlXHJcblxyXG4gICAgaWYgKCF0aGF0Lmhhc0NsYXNzKFwib3B0Z3JvdXBcIikpIHtcclxuICAgICAgdmFyIHBhcmVudFVsID0gdGhhdC5wYXJlbnQoXCJ1bFwiKSxcclxuICAgICAgICB0aGlzZGQgPSBwYXJlbnRVbC5zaWJsaW5ncyhcIi5kcm9wZG93bi1zZWxlY3RcIiksXHJcbiAgICAgICAgbGlodG1sID0gdGhhdC5odG1sKCksXHJcbiAgICAgICAgbGl2YWx1ZSA9IHRoYXQuYXR0cihcImRhdGEtdmFsdWVcIiksXHJcbiAgICAgICAgb3JpZ2luYWxTZWxlY3QgPSBcIiNcIiArIHBhcmVudFVsLmF0dHIoXCJkYXRhLXJvbGVcIik7IC8vY2xvc2UgdGhlIGRyb3Bkb3duXHJcblxyXG4gICAgICBwYXJlbnRVbC5wYXJlbnQoXCIuZHJvcGRvd24tY29udGFpbmVyXCIpLnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpOyAvL3JlbW92ZSBzZWxlY3RlZCBjbGFzcyBmcm9tIGFsbCBsaXN0IGl0ZW1zXHJcblxyXG4gICAgICB0aGF0LnNpYmxpbmdzKFwibGlcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTsgLy9hZGQgLnNlbGVjdGVkIHRvIGNsaWNrZWQgbGlcclxuXHJcbiAgICAgIHRoYXQuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTsgLy9zZXQgdGhlIHZhbHVlIG9mIHRoZSBoaWRkZW4gaW5wdXRcclxuXHJcbiAgICAgICQob3JpZ2luYWxTZWxlY3QpLnZhbChsaXZhbHVlKTsgLy9jaGFuZ2UgdGhlIGRyb3Bkb3duIHRleHRcclxuXHJcbiAgICAgIHRoaXNkZC5jaGlsZHJlbihcInNwYW5cIikuaHRtbChsaWh0bWwpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KShqUXVlcnkpO1xyXG4iLCIkKFwiLnRhYi1jb250ZW50XCIpLmhpZGUoKTtcclxuJChcIi50YWItY29udGVudDpmaXJzdFwiKS5zaG93KCk7XHJcbi8qIGlmIGluIHRhYiBtb2RlICovXHJcblxyXG4kKFwidWwudGFicyBsaSwucHJvZHVjdC1jYXJkX19yZXZpZXctbGluayBhLC5zY2hlZHVsZS1idG4gYVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbiAgJChcIi50YWItY29udGVudFwiKS5oaWRlKCk7XHJcbiAgdmFyIGFjdGl2ZVRhYiA9ICQodGhpcykuYXR0cihcInJlbFwiKTtcclxuICAkKFwiI1wiICsgYWN0aXZlVGFiKS5mYWRlSW4oKTtcclxuICAkKFwidWwudGFicyBsaVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuICAkKHRoaXMpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xyXG4gICQoXCIudGFiX2RyYXdlcl9oZWFkaW5nXCIpLnJlbW92ZUNsYXNzKFwiZF9hY3RpdmVcIik7XHJcbiAgJChcIi50YWJfZHJhd2VyX2hlYWRpbmdbcmVsXj0nXCIgKyBhY3RpdmVUYWIgKyBcIiddXCIpLmFkZENsYXNzKFwiZF9hY3RpdmVcIik7XHJcbn0pO1xyXG4vKiBpZiBpbiBkcmF3ZXIgbW9kZSAqL1xyXG5cclxuJChcIi50YWJfZHJhd2VyX2hlYWRpbmdcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gIHZhciBkX2FjdGl2ZVRhYiA9ICQodGhpcykuYXR0cihcInJlbFwiKSxcclxuICAgIGFjdGl2ZVRhYkJsb2NrID0gJChcIiNcIiArIGRfYWN0aXZlVGFiICsgXCI6aGlkZGVuXCIpLFxyXG4gICAgJHRoaXNBY3RpdmUgPSAkKHRoaXMpLm5vdChcIi5kX2FjdGl2ZVwiKTtcclxuICAkKFwiLnRhYi1jb250ZW50XCIpLmhpZGUoKTtcclxuICBhY3RpdmVUYWJCbG9jay5mYWRlSW4oKTtcclxuICAkKFwiLnRhYl9kcmF3ZXJfaGVhZGluZ1wiKS5yZW1vdmVDbGFzcyhcImRfYWN0aXZlXCIpO1xyXG4gICR0aGlzQWN0aXZlLmFkZENsYXNzKFwiZF9hY3RpdmVcIik7XHJcbiAgJChcInVsLnRhYnMgbGlcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgJChcInVsLnRhYnMgbGlbcmVsXj0nXCIgKyBkX2FjdGl2ZVRhYiArIFwiJ11cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcbn0pO1xyXG4vKiBFeHRyYSBjbGFzcyBcInRhYl9sYXN0XCJcclxuIHRvIGFkZCBib3JkZXIgdG8gcmlnaHQgc2lkZVxyXG4gb2YgbGFzdCB0YWIgKi9cclxuXHJcbiQoXCJ1bC50YWJzIGxpXCIpLmxhc3QoKS5hZGRDbGFzcyhcInRhYl9sYXN0XCIpO1xyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICBqUXVlcnkoXCIuc2NoZWR1bGUtYnRuIGFcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgalF1ZXJ5KFwiLnNjaGVkdWxlLWxpbmtcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgfSk7XHJcbn0pO1xyXG5qUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuICBqUXVlcnkoXCIucHJvZHVjdC1jYXJkX19yZXZpZXctbGluayBhXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAgIGpRdWVyeShcIi5yZXZpZXctdGFiLWxpbmtcIikudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIik7XHJcbiAgfSk7XHJcbn0pOyAvL3NsaWRlc2hvd1xyXG4iLCIkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHN5bmMxID0gJChcIiNzeW5jMVwiKTtcclxuICB2YXIgc3luYzIgPSAkKFwiI3N5bmMyXCIpO1xyXG4gIHZhciBzbGlkZXNQZXJQYWdlID0gMzsgLy9nbG9iYWx5IGRlZmluZSBudW1iZXIgb2YgZWxlbWVudHMgcGVyIHBhZ2VcclxuXHJcbiAgdmFyIHN5bmNlZFNlY29uZGFyeSA9IHRydWU7XHJcbiAgc3luYzFcclxuICAub3dsQ2Fyb3VzZWwoe1xyXG4gICAgaXRlbXM6IDEsXHJcbiAgICBzbGlkZVNwZWVkOiAyMDAwLFxyXG4gICAgbmF2OiB0cnVlLFxyXG4gICAgYXV0b3BsYXk6IGZhbHNlLFxyXG4gICAgZG90czogdHJ1ZSxcclxuICAgIGxvb3A6IHRydWUsXHJcbiAgICByZXNwb25zaXZlUmVmcmVzaFJhdGU6IDIwMCxcclxuICAgIG1hcmdpbjogMTAsXHJcbiAgfSlcclxuICAub24oXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiLCBzeW5jUG9zaXRpb24pO1xyXG4gIHN5bmMyXHJcbiAgLm9uKFwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIHN5bmMyLmZpbmQoXCIub3dsLWl0ZW1cIikuZXEoMCkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xyXG4gIH0pXHJcbiAgLm93bENhcm91c2VsKHtcclxuICAgIGl0ZW1zOiBzbGlkZXNQZXJQYWdlLFxyXG4gICAgZG90czogdHJ1ZSxcclxuICAgIG5hdjogdHJ1ZSxcclxuICAgIG1hcmdpbjogMTAsXHJcbiAgICBzbWFydFNwZWVkOiAyMDAsXHJcbiAgICBzbGlkZVNwZWVkOiA1MDAsXHJcbiAgICBzbGlkZUJ5OiBzbGlkZXNQZXJQYWdlLFxyXG4gICAgLy9hbHRlcm5hdGl2ZWx5IHlvdSBjYW4gc2xpZGUgYnkgMSwgdGhpcyB3YXkgdGhlIGFjdGl2ZSBzbGlkZSB3aWxsIHN0aWNrIHRvIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBzZWNvbmQgY2Fyb3VzZWxcclxuICAgIHJlc3BvbnNpdmVSZWZyZXNoUmF0ZTogMTAwLFxyXG4gIH0pXHJcbiAgLm9uKFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIiwgc3luY1Bvc2l0aW9uMik7XHJcblxyXG4gIGZ1bmN0aW9uIHN5bmNQb3NpdGlvbihlbCkge1xyXG4gICAgLy9pZiB5b3Ugc2V0IGxvb3AgdG8gZmFsc2UsIHlvdSBoYXZlIHRvIHJlc3RvcmUgdGhpcyBuZXh0IGxpbmVcclxuICAgIC8vdmFyIGN1cnJlbnQgPSBlbC5pdGVtLmluZGV4O1xyXG4gICAgLy9pZiB5b3UgZGlzYWJsZSBsb29wIHlvdSBoYXZlIHRvIGNvbW1lbnQgdGhpcyBibG9ja1xyXG4gICAgdmFyIGNvdW50ID0gZWwuaXRlbS5jb3VudCAtIDE7XHJcbiAgICB2YXIgY3VycmVudCA9IE1hdGgucm91bmQoZWwuaXRlbS5pbmRleCAtIGVsLml0ZW0uY291bnQgLyAyIC0gMC41KTtcclxuXHJcbiAgICBpZiAoY3VycmVudCA8IDApIHtcclxuICAgICAgY3VycmVudCA9IGNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjdXJyZW50ID4gY291bnQpIHtcclxuICAgICAgY3VycmVudCA9IDA7XHJcbiAgICB9IC8vZW5kIGJsb2NrXHJcblxyXG4gICAgc3luYzIuZmluZChcIi5vd2wtaXRlbVwiKS5yZW1vdmVDbGFzcyhcImN1cnJlbnRcIikuZXEoY3VycmVudCkuYWRkQ2xhc3MoXCJjdXJyZW50XCIpO1xyXG4gICAgdmFyIG9uc2NyZWVuID0gc3luYzIuZmluZChcIi5vd2wtaXRlbS5hY3RpdmVcIikubGVuZ3RoIC0gMTtcclxuICAgIHZhciBzdGFydCA9IHN5bmMyLmZpbmQoXCIub3dsLWl0ZW0uYWN0aXZlXCIpLmZpcnN0KCkuaW5kZXgoKTtcclxuICAgIHZhciBlbmQgPSBzeW5jMi5maW5kKFwiLm93bC1pdGVtLmFjdGl2ZVwiKS5sYXN0KCkuaW5kZXgoKTtcclxuXHJcbiAgICBpZiAoY3VycmVudCA+IGVuZCkge1xyXG4gICAgICBzeW5jMi5kYXRhKFwib3dsLmNhcm91c2VsXCIpLnRvKGN1cnJlbnQsIDEwMCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGN1cnJlbnQgPCBzdGFydCkge1xyXG4gICAgICBzeW5jMi5kYXRhKFwib3dsLmNhcm91c2VsXCIpLnRvKGN1cnJlbnQgLSBvbnNjcmVlbiwgMTAwLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN5bmNQb3NpdGlvbjIoZWwpIHtcclxuICAgIGlmIChzeW5jZWRTZWNvbmRhcnkpIHtcclxuICAgICAgdmFyIG51bWJlciA9IGVsLml0ZW0uaW5kZXg7XHJcbiAgICAgIHN5bmMxLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIikudG8obnVtYmVyLCAxMDAsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3luYzIub24oXCJjbGlja1wiLCBcIi5vd2wtaXRlbVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgdmFyIG51bWJlciA9ICQodGhpcykuaW5kZXgoKTtcclxuICAgIHN5bmMxLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIikudG8obnVtYmVyLCAzMDAsIHRydWUpO1xyXG4gIH0pO1xyXG59KTtcclxuIiwidmFyIGJpZ1NsaWRlcyA9ICQoXCIubWFpbi1zbGlkZXIgLm93bC1jYXJvdXNlbFwiKSxcclxuICBhdXRvUGxheVRpbWVvdXRTZWMgPSBwYXJzZUludChiaWdTbGlkZXMuZGF0YShcImF1dG9wbGF5LXRpbWVvdXRcIikpO1xyXG5iaWdTbGlkZXMub3dsQ2Fyb3VzZWwoe1xyXG4gIGxvb3A6IHRydWUsXHJcbiAgbWFyZ2luOiA1LFxyXG4gIG5hdjogdHJ1ZSxcclxuICBkb3RzOiB0cnVlLFxyXG4gIGl0ZW1zOiAxLFxyXG4gIGF1dG9wbGF5OiB0cnVlLFxyXG4gIGF1dG9wbGF5VGltZW91dDogYXV0b1BsYXlUaW1lb3V0U2VjICogMTAwMCxcclxuICBuYXZUZXh0OiBbXHJcbiAgICAnPHN2ZyBjbGFzcz1cImljb25cIiB2aWV3Qm94PVwiMCAwIDEwLjUgMTguMVwiPjxwYXRoIHN0cm9rZT1cIm5vbmVcIiBkPVwiTTksMGwxLjQsMS40TDIuOCw5bDcuNiw3LjZMOSwxOC4xTDAsOUMwLDksOS4xLDAsOSwwelwiPjwvcGF0aD48L3N2Zz4nLFxyXG4gICAgJzxzdmcgY2xhc3M9XCJpY29uXCIgdmlld0JveD1cIjAgMCAxMC41IDE4LjFcIj48cGF0aCBzdHJva2U9XCJub25lXCIgZD1cIk0xLjQsMTguMUwwLDE2LjdsNy42LTcuNkwwLDEuNUwxLjQsMGw5LDkuMUMxMC40LDkuMSwxLjMsMTguMSwxLjQsMTguMXpcIj48L3BhdGg+PC9zdmc+JyxcclxuICBdLFxyXG59KTtcclxudmFyIHJhZGlvQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxpdmVyeS1zZWxlY3Rpb24gaW5wdXRbdHlwZT1cInJhZGlvXCJdJyk7XHJcbnZhciBjaG9pY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5kZWxpdmVyeS1jaG9pY2VcIik7XHJcbnJhZGlvQnV0dG9ucy5mb3JFYWNoKGZ1bmN0aW9uIChidG4pIHtcclxuICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgY2xpY2tlZCA9IHRoaXM7XHJcbiAgICBjaG9pY2VzLmZvckVhY2goZnVuY3Rpb24gKGNob2ljZSkge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgY2hvaWNlLmNsYXNzTGlzdC5jb250YWlucyhjbGlja2VkLmlkKSB8fFxyXG4gICAgICAgIGNob2ljZS5jbGFzc0xpc3QuY29udGFpbnMoXCJkZWxpdmVyeS10eXBlLVwiICsgY2xpY2tlZC52YWx1ZSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgY2hvaWNlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hvaWNlLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4kKFwiLnNob3BwaW5nLWNhcnQtaXRlbV9fZGVsZXRlXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcclxuICAkKHRoaXMpLnBhcmVudChcIi5zaG9wcGluZy1jYXJ0LWl0ZW1cIikucmVtb3ZlKCk7XHJcbn0pO1xyXG4kKFwiLnNsaWRlciAub3dsLWNhcm91c2VsXCIpLm93bENhcm91c2VsKHtcclxuICBsb29wOiB0cnVlLFxyXG4gIG1hcmdpbjogMCxcclxuICBpdGVtczogMSxcclxuICBuYXY6IHRydWUsXHJcbn0pO1xyXG4kKFwiLm5ld3Mtc2xpZGVyIC5vd2wtY2Fyb3VzZWxcIikub3dsQ2Fyb3VzZWwoe1xyXG4gIGxvb3A6IHRydWUsXHJcbiAgbWFyZ2luOiAwLFxyXG4gIGl0ZW1zOiA0LFxyXG4gIHJlc3BvbnNpdmU6IHtcclxuICAgIDA6IHtcclxuICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgaXRlbXM6IDEsXHJcbiAgICB9LFxyXG4gICAgNDc5OiB7XHJcbiAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiAyLFxyXG4gICAgfSxcclxuICAgIDc2ODoge1xyXG4gICAgICBuYXY6IHRydWUsXHJcbiAgICAgIGRvdHM6IGZhbHNlLFxyXG4gICAgICBpdGVtczogMyxcclxuICAgIH0sXHJcbiAgICA5OTI6IHtcclxuICAgICAgaXRlbXM6IDQsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG4kKFwiLmFjdGlvbi1zbGlkZXIgLm93bC1jYXJvdXNlbFwiKS5vd2xDYXJvdXNlbCh7XHJcbiAgbG9vcDogdHJ1ZSxcclxuICBtYXJnaW46IDIwLFxyXG4gIG5hdjogdHJ1ZSxcclxuICBkb3RzOiBmYWxzZSxcclxuICBpdGVtczogMyxcclxuICByZXNwb25zaXZlOiB7XHJcbiAgICAwOiB7XHJcbiAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiAxLFxyXG4gICAgfSxcclxuICAgIDQ3OToge1xyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBpdGVtczogMixcclxuICAgIH0sXHJcbiAgICA3Njg6IHtcclxuICAgICAgbmF2OiB0cnVlLFxyXG4gICAgICBkb3RzOiBmYWxzZSxcclxuICAgICAgaXRlbXM6IDMsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG4kKFwiLnBhcnRuZXJzLXNsaWRlciAub3dsLWNhcm91c2VsXCIpLm93bENhcm91c2VsKHtcclxuICBsb29wOiB0cnVlLFxyXG4gIG1hcmdpbjogMCxcclxuICBuYXY6IHRydWUsXHJcbiAgZG90czogZmFsc2UsXHJcbiAgaXRlbXM6IDUsXHJcbiAgcmVzcG9uc2l2ZToge1xyXG4gICAgMDoge1xyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBpdGVtczogMSxcclxuICAgIH0sXHJcbiAgICA1NjY6IHtcclxuICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgZG90czogdHJ1ZSxcclxuICAgICAgaXRlbXM6IDIsXHJcbiAgICB9LFxyXG4gICAgNzY4OiB7XHJcbiAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgIGRvdHM6IHRydWUsXHJcbiAgICAgIGl0ZW1zOiAzLFxyXG4gICAgfSxcclxuICAgIDkwMDoge1xyXG4gICAgICBuYXY6IGZhbHNlLFxyXG4gICAgICBkb3RzOiB0cnVlLFxyXG4gICAgICBpdGVtczogNCxcclxuICAgIH0sXHJcbiAgICA5NTA6IHtcclxuICAgICAgZG90czogZmFsc2UsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG4iXX0=
